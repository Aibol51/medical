// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v4.25.2
// source: rpc/core.proto

package core

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ApiInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *uint64 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	CreatedAt   *int64  `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	UpdatedAt   *int64  `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	Path        *string `protobuf:"bytes,4,opt,name=path,proto3,oneof" json:"path,omitempty"`
	Description *string `protobuf:"bytes,5,opt,name=description,proto3,oneof" json:"description,omitempty"`
	ApiGroup    *string `protobuf:"bytes,6,opt,name=api_group,json=apiGroup,proto3,oneof" json:"api_group,omitempty"`
	Method      *string `protobuf:"bytes,7,opt,name=method,proto3,oneof" json:"method,omitempty"`
	IsRequired  *bool   `protobuf:"varint,8,opt,name=is_required,json=isRequired,proto3,oneof" json:"is_required,omitempty"`
	ServiceName *string `protobuf:"bytes,9,opt,name=service_name,json=serviceName,proto3,oneof" json:"service_name,omitempty"`
}

func (x *ApiInfo) Reset() {
	*x = ApiInfo{}
	mi := &file_rpc_core_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiInfo) ProtoMessage() {}

func (x *ApiInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiInfo.ProtoReflect.Descriptor instead.
func (*ApiInfo) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{0}
}

func (x *ApiInfo) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ApiInfo) GetCreatedAt() int64 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

func (x *ApiInfo) GetUpdatedAt() int64 {
	if x != nil && x.UpdatedAt != nil {
		return *x.UpdatedAt
	}
	return 0
}

func (x *ApiInfo) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *ApiInfo) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ApiInfo) GetApiGroup() string {
	if x != nil && x.ApiGroup != nil {
		return *x.ApiGroup
	}
	return ""
}

func (x *ApiInfo) GetMethod() string {
	if x != nil && x.Method != nil {
		return *x.Method
	}
	return ""
}

func (x *ApiInfo) GetIsRequired() bool {
	if x != nil && x.IsRequired != nil {
		return *x.IsRequired
	}
	return false
}

func (x *ApiInfo) GetServiceName() string {
	if x != nil && x.ServiceName != nil {
		return *x.ServiceName
	}
	return ""
}

type ApiListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page        uint64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize    uint64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Path        *string `protobuf:"bytes,3,opt,name=path,proto3,oneof" json:"path,omitempty"`
	Description *string `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
	ApiGroup    *string `protobuf:"bytes,5,opt,name=api_group,json=apiGroup,proto3,oneof" json:"api_group,omitempty"`
	Method      *string `protobuf:"bytes,6,opt,name=method,proto3,oneof" json:"method,omitempty"`
	IsDefault   *string `protobuf:"bytes,7,opt,name=is_default,json=isDefault,proto3,oneof" json:"is_default,omitempty"`
	ServiceName *string `protobuf:"bytes,8,opt,name=service_name,json=serviceName,proto3,oneof" json:"service_name,omitempty"`
}

func (x *ApiListReq) Reset() {
	*x = ApiListReq{}
	mi := &file_rpc_core_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiListReq) ProtoMessage() {}

func (x *ApiListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiListReq.ProtoReflect.Descriptor instead.
func (*ApiListReq) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{1}
}

func (x *ApiListReq) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ApiListReq) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ApiListReq) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *ApiListReq) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ApiListReq) GetApiGroup() string {
	if x != nil && x.ApiGroup != nil {
		return *x.ApiGroup
	}
	return ""
}

func (x *ApiListReq) GetMethod() string {
	if x != nil && x.Method != nil {
		return *x.Method
	}
	return ""
}

func (x *ApiListReq) GetIsDefault() string {
	if x != nil && x.IsDefault != nil {
		return *x.IsDefault
	}
	return ""
}

func (x *ApiListReq) GetServiceName() string {
	if x != nil && x.ServiceName != nil {
		return *x.ServiceName
	}
	return ""
}

type ApiListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64     `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*ApiInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ApiListResp) Reset() {
	*x = ApiListResp{}
	mi := &file_rpc_core_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiListResp) ProtoMessage() {}

func (x *ApiListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiListResp.ProtoReflect.Descriptor instead.
func (*ApiListResp) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{2}
}

func (x *ApiListResp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ApiListResp) GetData() []*ApiInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type AppointmentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *string `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	CreatedAt *int64  `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	UpdatedAt *int64  `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	// Patient name | 患者姓名
	PatientName *string `protobuf:"bytes,4,opt,name=patient_name,json=patientName,proto3,oneof" json:"patient_name,omitempty"`
	// Phone number | 联系电话
	PhoneNumber *string `protobuf:"bytes,5,opt,name=phone_number,json=phoneNumber,proto3,oneof" json:"phone_number,omitempty"`
	// ID card number | 身份证号
	IdCard *string `protobuf:"bytes,6,opt,name=id_card,json=idCard,proto3,oneof" json:"id_card,omitempty"`
	// Gender 1:male 2:female | 性别 1:男 2:女
	Gender *int32 `protobuf:"varint,7,opt,name=gender,proto3,oneof" json:"gender,omitempty"`
	// Age | 年龄
	Age *int32 `protobuf:"varint,8,opt,name=age,proto3,oneof" json:"age,omitempty"`
	// Appointment time | 预约时间
	AppointmentTime *int64 `protobuf:"varint,9,opt,name=appointment_time,json=appointmentTime,proto3,oneof" json:"appointment_time,omitempty"`
	// Symptoms description | 症状描述
	Symptoms *string `protobuf:"bytes,10,opt,name=symptoms,proto3,oneof" json:"symptoms,omitempty"`
	// Status 1:pending 2:confirmed 3:completed 4:cancelled 5:expired | 状态 1:待确认 2:已确认 3:已完成 4:已取消 5:已过期
	Status *int32 `protobuf:"varint,11,opt,name=status,proto3,oneof" json:"status,omitempty"`
	// Remarks | 备注信息
	Remarks *string `protobuf:"bytes,12,opt,name=remarks,proto3,oneof" json:"remarks,omitempty"`
	// User ID | 用户ID
	UserId *string `protobuf:"bytes,13,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
}

func (x *AppointmentInfo) Reset() {
	*x = AppointmentInfo{}
	mi := &file_rpc_core_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppointmentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppointmentInfo) ProtoMessage() {}

func (x *AppointmentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppointmentInfo.ProtoReflect.Descriptor instead.
func (*AppointmentInfo) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{3}
}

func (x *AppointmentInfo) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *AppointmentInfo) GetCreatedAt() int64 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

func (x *AppointmentInfo) GetUpdatedAt() int64 {
	if x != nil && x.UpdatedAt != nil {
		return *x.UpdatedAt
	}
	return 0
}

func (x *AppointmentInfo) GetPatientName() string {
	if x != nil && x.PatientName != nil {
		return *x.PatientName
	}
	return ""
}

func (x *AppointmentInfo) GetPhoneNumber() string {
	if x != nil && x.PhoneNumber != nil {
		return *x.PhoneNumber
	}
	return ""
}

func (x *AppointmentInfo) GetIdCard() string {
	if x != nil && x.IdCard != nil {
		return *x.IdCard
	}
	return ""
}

func (x *AppointmentInfo) GetGender() int32 {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return 0
}

func (x *AppointmentInfo) GetAge() int32 {
	if x != nil && x.Age != nil {
		return *x.Age
	}
	return 0
}

func (x *AppointmentInfo) GetAppointmentTime() int64 {
	if x != nil && x.AppointmentTime != nil {
		return *x.AppointmentTime
	}
	return 0
}

func (x *AppointmentInfo) GetSymptoms() string {
	if x != nil && x.Symptoms != nil {
		return *x.Symptoms
	}
	return ""
}

func (x *AppointmentInfo) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *AppointmentInfo) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

func (x *AppointmentInfo) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

type AppointmentListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page        uint64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize    uint64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PatientName *string `protobuf:"bytes,3,opt,name=patient_name,json=patientName,proto3,oneof" json:"patient_name,omitempty"`
	PhoneNumber *string `protobuf:"bytes,4,opt,name=phone_number,json=phoneNumber,proto3,oneof" json:"phone_number,omitempty"`
	IdCard      *string `protobuf:"bytes,5,opt,name=id_card,json=idCard,proto3,oneof" json:"id_card,omitempty"`
	UserId      *string `protobuf:"bytes,6,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	Status      *int32  `protobuf:"varint,7,opt,name=status,proto3,oneof" json:"status,omitempty"`
}

func (x *AppointmentListReq) Reset() {
	*x = AppointmentListReq{}
	mi := &file_rpc_core_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppointmentListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppointmentListReq) ProtoMessage() {}

func (x *AppointmentListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppointmentListReq.ProtoReflect.Descriptor instead.
func (*AppointmentListReq) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{4}
}

func (x *AppointmentListReq) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *AppointmentListReq) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *AppointmentListReq) GetPatientName() string {
	if x != nil && x.PatientName != nil {
		return *x.PatientName
	}
	return ""
}

func (x *AppointmentListReq) GetPhoneNumber() string {
	if x != nil && x.PhoneNumber != nil {
		return *x.PhoneNumber
	}
	return ""
}

func (x *AppointmentListReq) GetIdCard() string {
	if x != nil && x.IdCard != nil {
		return *x.IdCard
	}
	return ""
}

func (x *AppointmentListReq) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *AppointmentListReq) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

type AppointmentListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64             `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*AppointmentInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *AppointmentListResp) Reset() {
	*x = AppointmentListResp{}
	mi := &file_rpc_core_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppointmentListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppointmentListResp) ProtoMessage() {}

func (x *AppointmentListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppointmentListResp.ProtoReflect.Descriptor instead.
func (*AppointmentListResp) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{5}
}

func (x *AppointmentListResp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *AppointmentListResp) GetData() []*AppointmentInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type BaseIDResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *BaseIDResp) Reset() {
	*x = BaseIDResp{}
	mi := &file_rpc_core_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaseIDResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseIDResp) ProtoMessage() {}

func (x *BaseIDResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseIDResp.ProtoReflect.Descriptor instead.
func (*BaseIDResp) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{6}
}

func (x *BaseIDResp) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BaseIDResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type BaseMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *BaseMsg) Reset() {
	*x = BaseMsg{}
	mi := &file_rpc_core_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaseMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseMsg) ProtoMessage() {}

func (x *BaseMsg) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseMsg.ProtoReflect.Descriptor instead.
func (*BaseMsg) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{7}
}

func (x *BaseMsg) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type BaseResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *BaseResp) Reset() {
	*x = BaseResp{}
	mi := &file_rpc_core_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaseResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseResp) ProtoMessage() {}

func (x *BaseResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseResp.ProtoReflect.Descriptor instead.
func (*BaseResp) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{8}
}

func (x *BaseResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type BaseUUIDResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *BaseUUIDResp) Reset() {
	*x = BaseUUIDResp{}
	mi := &file_rpc_core_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaseUUIDResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseUUIDResp) ProtoMessage() {}

func (x *BaseUUIDResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseUUIDResp.ProtoReflect.Descriptor instead.
func (*BaseUUIDResp) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{9}
}

func (x *BaseUUIDResp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BaseUUIDResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type CallbackReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State string `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Code  string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *CallbackReq) Reset() {
	*x = CallbackReq{}
	mi := &file_rpc_core_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallbackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallbackReq) ProtoMessage() {}

func (x *CallbackReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallbackReq.ProtoReflect.Descriptor instead.
func (*CallbackReq) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{10}
}

func (x *CallbackReq) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *CallbackReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type ConfigurationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *uint64 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	CreatedAt *int64  `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	UpdatedAt *int64  `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	//  Sort Number | 排序编号
	Sort *uint32 `protobuf:"varint,4,opt,name=sort,proto3,oneof" json:"sort,omitempty"`
	//  State true: normal false: ban | 状态 true 正常 false 禁用
	State *bool `protobuf:"varint,5,opt,name=state,proto3,oneof" json:"state,omitempty"`
	//  Configurarion name | 配置名称
	Name *string `protobuf:"bytes,6,opt,name=name,proto3,oneof" json:"name,omitempty"`
	//  Configuration key | 配置的键名
	Key *string `protobuf:"bytes,7,opt,name=key,proto3,oneof" json:"key,omitempty"`
	//  Configuraion value | 配置的值
	Value *string `protobuf:"bytes,8,opt,name=value,proto3,oneof" json:"value,omitempty"`
	//  Configuration category | 配置的分类
	Category *string `protobuf:"bytes,9,opt,name=category,proto3,oneof" json:"category,omitempty"`
	//  Remark | 备注
	Remark *string `protobuf:"bytes,10,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
}

func (x *ConfigurationInfo) Reset() {
	*x = ConfigurationInfo{}
	mi := &file_rpc_core_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigurationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationInfo) ProtoMessage() {}

func (x *ConfigurationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationInfo.ProtoReflect.Descriptor instead.
func (*ConfigurationInfo) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{11}
}

func (x *ConfigurationInfo) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ConfigurationInfo) GetCreatedAt() int64 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

func (x *ConfigurationInfo) GetUpdatedAt() int64 {
	if x != nil && x.UpdatedAt != nil {
		return *x.UpdatedAt
	}
	return 0
}

func (x *ConfigurationInfo) GetSort() uint32 {
	if x != nil && x.Sort != nil {
		return *x.Sort
	}
	return 0
}

func (x *ConfigurationInfo) GetState() bool {
	if x != nil && x.State != nil {
		return *x.State
	}
	return false
}

func (x *ConfigurationInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ConfigurationInfo) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *ConfigurationInfo) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *ConfigurationInfo) GetCategory() string {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return ""
}

func (x *ConfigurationInfo) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

type ConfigurationListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     uint64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize uint64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Name     *string `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Key      *string `protobuf:"bytes,4,opt,name=key,proto3,oneof" json:"key,omitempty"`
	Category *string `protobuf:"bytes,5,opt,name=category,proto3,oneof" json:"category,omitempty"`
	State    *bool   `protobuf:"varint,6,opt,name=state,proto3,oneof" json:"state,omitempty"`
}

func (x *ConfigurationListReq) Reset() {
	*x = ConfigurationListReq{}
	mi := &file_rpc_core_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigurationListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationListReq) ProtoMessage() {}

func (x *ConfigurationListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationListReq.ProtoReflect.Descriptor instead.
func (*ConfigurationListReq) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{12}
}

func (x *ConfigurationListReq) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ConfigurationListReq) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ConfigurationListReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ConfigurationListReq) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *ConfigurationListReq) GetCategory() string {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return ""
}

func (x *ConfigurationListReq) GetState() bool {
	if x != nil && x.State != nil {
		return *x.State
	}
	return false
}

type ConfigurationListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64               `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*ConfigurationInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ConfigurationListResp) Reset() {
	*x = ConfigurationListResp{}
	mi := &file_rpc_core_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigurationListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationListResp) ProtoMessage() {}

func (x *ConfigurationListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationListResp.ProtoReflect.Descriptor instead.
func (*ConfigurationListResp) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{13}
}

func (x *ConfigurationListResp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ConfigurationListResp) GetData() []*ConfigurationInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type DepartmentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *uint64 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	CreatedAt *int64  `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	UpdatedAt *int64  `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	Status    *uint32 `protobuf:"varint,4,opt,name=status,proto3,oneof" json:"status,omitempty"`
	Sort      *uint32 `protobuf:"varint,5,opt,name=sort,proto3,oneof" json:"sort,omitempty"`
	Name      *string `protobuf:"bytes,6,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Ancestors *string `protobuf:"bytes,7,opt,name=ancestors,proto3,oneof" json:"ancestors,omitempty"`
	Leader    *string `protobuf:"bytes,8,opt,name=leader,proto3,oneof" json:"leader,omitempty"`
	Phone     *string `protobuf:"bytes,9,opt,name=phone,proto3,oneof" json:"phone,omitempty"`
	Email     *string `protobuf:"bytes,10,opt,name=email,proto3,oneof" json:"email,omitempty"`
	Remark    *string `protobuf:"bytes,11,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	ParentId  *uint64 `protobuf:"varint,12,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
}

func (x *DepartmentInfo) Reset() {
	*x = DepartmentInfo{}
	mi := &file_rpc_core_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepartmentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepartmentInfo) ProtoMessage() {}

func (x *DepartmentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepartmentInfo.ProtoReflect.Descriptor instead.
func (*DepartmentInfo) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{14}
}

func (x *DepartmentInfo) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *DepartmentInfo) GetCreatedAt() int64 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

func (x *DepartmentInfo) GetUpdatedAt() int64 {
	if x != nil && x.UpdatedAt != nil {
		return *x.UpdatedAt
	}
	return 0
}

func (x *DepartmentInfo) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *DepartmentInfo) GetSort() uint32 {
	if x != nil && x.Sort != nil {
		return *x.Sort
	}
	return 0
}

func (x *DepartmentInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DepartmentInfo) GetAncestors() string {
	if x != nil && x.Ancestors != nil {
		return *x.Ancestors
	}
	return ""
}

func (x *DepartmentInfo) GetLeader() string {
	if x != nil && x.Leader != nil {
		return *x.Leader
	}
	return ""
}

func (x *DepartmentInfo) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

func (x *DepartmentInfo) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *DepartmentInfo) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *DepartmentInfo) GetParentId() uint64 {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return 0
}

type DepartmentListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     uint64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize uint64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Name     *string `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Leader   *string `protobuf:"bytes,4,opt,name=leader,proto3,oneof" json:"leader,omitempty"`
}

func (x *DepartmentListReq) Reset() {
	*x = DepartmentListReq{}
	mi := &file_rpc_core_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepartmentListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepartmentListReq) ProtoMessage() {}

func (x *DepartmentListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepartmentListReq.ProtoReflect.Descriptor instead.
func (*DepartmentListReq) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{15}
}

func (x *DepartmentListReq) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *DepartmentListReq) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *DepartmentListReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DepartmentListReq) GetLeader() string {
	if x != nil && x.Leader != nil {
		return *x.Leader
	}
	return ""
}

type DepartmentListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64            `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*DepartmentInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *DepartmentListResp) Reset() {
	*x = DepartmentListResp{}
	mi := &file_rpc_core_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepartmentListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepartmentListResp) ProtoMessage() {}

func (x *DepartmentListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepartmentListResp.ProtoReflect.Descriptor instead.
func (*DepartmentListResp) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{16}
}

func (x *DepartmentListResp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DepartmentListResp) GetData() []*DepartmentInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type DictionaryDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *uint64 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	CreatedAt    *int64  `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	UpdatedAt    *int64  `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	Status       *uint32 `protobuf:"varint,4,opt,name=status,proto3,oneof" json:"status,omitempty"`
	Title        *string `protobuf:"bytes,5,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Key          *string `protobuf:"bytes,6,opt,name=key,proto3,oneof" json:"key,omitempty"`
	Value        *string `protobuf:"bytes,7,opt,name=value,proto3,oneof" json:"value,omitempty"`
	DictionaryId *uint64 `protobuf:"varint,8,opt,name=dictionary_id,json=dictionaryId,proto3,oneof" json:"dictionary_id,omitempty"`
	Sort         *uint32 `protobuf:"varint,9,opt,name=sort,proto3,oneof" json:"sort,omitempty"`
}

func (x *DictionaryDetailInfo) Reset() {
	*x = DictionaryDetailInfo{}
	mi := &file_rpc_core_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DictionaryDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictionaryDetailInfo) ProtoMessage() {}

func (x *DictionaryDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictionaryDetailInfo.ProtoReflect.Descriptor instead.
func (*DictionaryDetailInfo) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{17}
}

func (x *DictionaryDetailInfo) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *DictionaryDetailInfo) GetCreatedAt() int64 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

func (x *DictionaryDetailInfo) GetUpdatedAt() int64 {
	if x != nil && x.UpdatedAt != nil {
		return *x.UpdatedAt
	}
	return 0
}

func (x *DictionaryDetailInfo) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *DictionaryDetailInfo) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *DictionaryDetailInfo) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *DictionaryDetailInfo) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *DictionaryDetailInfo) GetDictionaryId() uint64 {
	if x != nil && x.DictionaryId != nil {
		return *x.DictionaryId
	}
	return 0
}

func (x *DictionaryDetailInfo) GetSort() uint32 {
	if x != nil && x.Sort != nil {
		return *x.Sort
	}
	return 0
}

type DictionaryDetailListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page         uint64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize     uint64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	DictionaryId *uint64 `protobuf:"varint,3,opt,name=dictionary_id,json=dictionaryId,proto3,oneof" json:"dictionary_id,omitempty"`
	Key          *string `protobuf:"bytes,4,opt,name=key,proto3,oneof" json:"key,omitempty"`
}

func (x *DictionaryDetailListReq) Reset() {
	*x = DictionaryDetailListReq{}
	mi := &file_rpc_core_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DictionaryDetailListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictionaryDetailListReq) ProtoMessage() {}

func (x *DictionaryDetailListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictionaryDetailListReq.ProtoReflect.Descriptor instead.
func (*DictionaryDetailListReq) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{18}
}

func (x *DictionaryDetailListReq) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *DictionaryDetailListReq) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *DictionaryDetailListReq) GetDictionaryId() uint64 {
	if x != nil && x.DictionaryId != nil {
		return *x.DictionaryId
	}
	return 0
}

func (x *DictionaryDetailListReq) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

type DictionaryDetailListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*DictionaryDetailInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *DictionaryDetailListResp) Reset() {
	*x = DictionaryDetailListResp{}
	mi := &file_rpc_core_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DictionaryDetailListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictionaryDetailListResp) ProtoMessage() {}

func (x *DictionaryDetailListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictionaryDetailListResp.ProtoReflect.Descriptor instead.
func (*DictionaryDetailListResp) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{19}
}

func (x *DictionaryDetailListResp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DictionaryDetailListResp) GetData() []*DictionaryDetailInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type DictionaryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *uint64 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	CreatedAt *int64  `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	UpdatedAt *int64  `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	Status    *uint32 `protobuf:"varint,4,opt,name=status,proto3,oneof" json:"status,omitempty"`
	Title     *string `protobuf:"bytes,5,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Name      *string `protobuf:"bytes,6,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Desc      *string `protobuf:"bytes,7,opt,name=desc,proto3,oneof" json:"desc,omitempty"`
}

func (x *DictionaryInfo) Reset() {
	*x = DictionaryInfo{}
	mi := &file_rpc_core_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DictionaryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictionaryInfo) ProtoMessage() {}

func (x *DictionaryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictionaryInfo.ProtoReflect.Descriptor instead.
func (*DictionaryInfo) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{20}
}

func (x *DictionaryInfo) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *DictionaryInfo) GetCreatedAt() int64 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

func (x *DictionaryInfo) GetUpdatedAt() int64 {
	if x != nil && x.UpdatedAt != nil {
		return *x.UpdatedAt
	}
	return 0
}

func (x *DictionaryInfo) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *DictionaryInfo) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *DictionaryInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DictionaryInfo) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

type DictionaryListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     uint64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize uint64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Name     *string `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`
}

func (x *DictionaryListReq) Reset() {
	*x = DictionaryListReq{}
	mi := &file_rpc_core_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DictionaryListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictionaryListReq) ProtoMessage() {}

func (x *DictionaryListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictionaryListReq.ProtoReflect.Descriptor instead.
func (*DictionaryListReq) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{21}
}

func (x *DictionaryListReq) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *DictionaryListReq) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *DictionaryListReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type DictionaryListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64            `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*DictionaryInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *DictionaryListResp) Reset() {
	*x = DictionaryListResp{}
	mi := &file_rpc_core_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DictionaryListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictionaryListResp) ProtoMessage() {}

func (x *DictionaryListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictionaryListResp.ProtoReflect.Descriptor instead.
func (*DictionaryListResp) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{22}
}

func (x *DictionaryListResp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DictionaryListResp) GetData() []*DictionaryInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

//  base message
type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_rpc_core_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{23}
}

type ExpertInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *uint64 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	CreatedAt *int64  `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	UpdatedAt *int64  `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	// Status 1: normal 2: ban | 状态 1 正常 2 禁用
	Status *uint32 `protobuf:"varint,4,opt,name=status,proto3,oneof" json:"status,omitempty"`
	// Sort Number | 排序编号
	Sort *uint32 `protobuf:"varint,5,opt,name=sort,proto3,oneof" json:"sort,omitempty"`
	// Chinese name | 中文名称
	NameZh *string `protobuf:"bytes,6,opt,name=name_zh,json=nameZh,proto3,oneof" json:"name_zh,omitempty"`
	// English name | 英文名称
	NameEn *string `protobuf:"bytes,7,opt,name=name_en,json=nameEn,proto3,oneof" json:"name_en,omitempty"`
	// Russian name | 俄语名称
	NameRu *string `protobuf:"bytes,8,opt,name=name_ru,json=nameRu,proto3,oneof" json:"name_ru,omitempty"`
	// Kazakh name | 哈萨克语名称
	NameKk *string `protobuf:"bytes,9,opt,name=name_kk,json=nameKk,proto3,oneof" json:"name_kk,omitempty"`
	// Chinese content | 中文内容
	ContentZh *string `protobuf:"bytes,10,opt,name=content_zh,json=contentZh,proto3,oneof" json:"content_zh,omitempty"`
	// English content | 英文内容
	ContentEn *string `protobuf:"bytes,11,opt,name=content_en,json=contentEn,proto3,oneof" json:"content_en,omitempty"`
	// Russian content | 俄语内容
	ContentRu *string `protobuf:"bytes,12,opt,name=content_ru,json=contentRu,proto3,oneof" json:"content_ru,omitempty"`
	// Kazakh content | 哈萨克语内容
	ContentKk *string `protobuf:"bytes,13,opt,name=content_kk,json=contentKk,proto3,oneof" json:"content_kk,omitempty"`
	// Cover image URL | 封面图片URL
	CoverUrl *string `protobuf:"bytes,14,opt,name=cover_url,json=coverUrl,proto3,oneof" json:"cover_url,omitempty"`
}

func (x *ExpertInfo) Reset() {
	*x = ExpertInfo{}
	mi := &file_rpc_core_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExpertInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpertInfo) ProtoMessage() {}

func (x *ExpertInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpertInfo.ProtoReflect.Descriptor instead.
func (*ExpertInfo) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{24}
}

func (x *ExpertInfo) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ExpertInfo) GetCreatedAt() int64 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

func (x *ExpertInfo) GetUpdatedAt() int64 {
	if x != nil && x.UpdatedAt != nil {
		return *x.UpdatedAt
	}
	return 0
}

func (x *ExpertInfo) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *ExpertInfo) GetSort() uint32 {
	if x != nil && x.Sort != nil {
		return *x.Sort
	}
	return 0
}

func (x *ExpertInfo) GetNameZh() string {
	if x != nil && x.NameZh != nil {
		return *x.NameZh
	}
	return ""
}

func (x *ExpertInfo) GetNameEn() string {
	if x != nil && x.NameEn != nil {
		return *x.NameEn
	}
	return ""
}

func (x *ExpertInfo) GetNameRu() string {
	if x != nil && x.NameRu != nil {
		return *x.NameRu
	}
	return ""
}

func (x *ExpertInfo) GetNameKk() string {
	if x != nil && x.NameKk != nil {
		return *x.NameKk
	}
	return ""
}

func (x *ExpertInfo) GetContentZh() string {
	if x != nil && x.ContentZh != nil {
		return *x.ContentZh
	}
	return ""
}

func (x *ExpertInfo) GetContentEn() string {
	if x != nil && x.ContentEn != nil {
		return *x.ContentEn
	}
	return ""
}

func (x *ExpertInfo) GetContentRu() string {
	if x != nil && x.ContentRu != nil {
		return *x.ContentRu
	}
	return ""
}

func (x *ExpertInfo) GetContentKk() string {
	if x != nil && x.ContentKk != nil {
		return *x.ContentKk
	}
	return ""
}

func (x *ExpertInfo) GetCoverUrl() string {
	if x != nil && x.CoverUrl != nil {
		return *x.CoverUrl
	}
	return ""
}

type ExpertListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     uint64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize uint64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	NameZh   *string `protobuf:"bytes,3,opt,name=name_zh,json=nameZh,proto3,oneof" json:"name_zh,omitempty"`
	NameEn   *string `protobuf:"bytes,4,opt,name=name_en,json=nameEn,proto3,oneof" json:"name_en,omitempty"`
	NameRu   *string `protobuf:"bytes,5,opt,name=name_ru,json=nameRu,proto3,oneof" json:"name_ru,omitempty"`
}

func (x *ExpertListReq) Reset() {
	*x = ExpertListReq{}
	mi := &file_rpc_core_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExpertListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpertListReq) ProtoMessage() {}

func (x *ExpertListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpertListReq.ProtoReflect.Descriptor instead.
func (*ExpertListReq) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{25}
}

func (x *ExpertListReq) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ExpertListReq) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ExpertListReq) GetNameZh() string {
	if x != nil && x.NameZh != nil {
		return *x.NameZh
	}
	return ""
}

func (x *ExpertListReq) GetNameEn() string {
	if x != nil && x.NameEn != nil {
		return *x.NameEn
	}
	return ""
}

func (x *ExpertListReq) GetNameRu() string {
	if x != nil && x.NameRu != nil {
		return *x.NameRu
	}
	return ""
}

type ExpertListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64        `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*ExpertInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ExpertListResp) Reset() {
	*x = ExpertListResp{}
	mi := &file_rpc_core_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExpertListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpertListResp) ProtoMessage() {}

func (x *ExpertListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpertListResp.ProtoReflect.Descriptor instead.
func (*ExpertListResp) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{26}
}

func (x *ExpertListResp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ExpertListResp) GetData() []*ExpertInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type IDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IDReq) Reset() {
	*x = IDReq{}
	mi := &file_rpc_core_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDReq) ProtoMessage() {}

func (x *IDReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDReq.ProtoReflect.Descriptor instead.
func (*IDReq) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{27}
}

func (x *IDReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type IDsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []uint64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *IDsReq) Reset() {
	*x = IDsReq{}
	mi := &file_rpc_core_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IDsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDsReq) ProtoMessage() {}

func (x *IDsReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDsReq.ProtoReflect.Descriptor instead.
func (*IDsReq) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{28}
}

func (x *IDsReq) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type MedicalRecordInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *string `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	CreatedAt *int64  `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	UpdatedAt *int64  `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	// Patient name | 姓名
	PatientName *string `protobuf:"bytes,4,opt,name=patient_name,json=patientName,proto3,oneof" json:"patient_name,omitempty"`
	// Gender 1:male 2:female | 性别 1:男 2:女
	Gender *int32 `protobuf:"varint,5,opt,name=gender,proto3,oneof" json:"gender,omitempty"`
	// Age | 年龄
	Age *int32 `protobuf:"varint,6,opt,name=age,proto3,oneof" json:"age,omitempty"`
	// ID card number | 身份证号
	IdCardNumber *string `protobuf:"bytes,7,opt,name=id_card_number,json=idCardNumber,proto3,oneof" json:"id_card_number,omitempty"`
	// Phone number | 电话
	PhoneNumber *string `protobuf:"bytes,8,opt,name=phone_number,json=phoneNumber,proto3,oneof" json:"phone_number,omitempty"`
	// Chief complaint | 主诉
	ChiefComplaint *string `protobuf:"bytes,9,opt,name=chief_complaint,json=chiefComplaint,proto3,oneof" json:"chief_complaint,omitempty"`
	// Present illness history | 现病史
	PresentIllness *string `protobuf:"bytes,10,opt,name=present_illness,json=presentIllness,proto3,oneof" json:"present_illness,omitempty"`
	// Past history | 既往史
	PastHistory *string `protobuf:"bytes,11,opt,name=past_history,json=pastHistory,proto3,oneof" json:"past_history,omitempty"`
	// Smoking history | 吸烟史: 1-无, 2-有, 3-一般, 4-多, 5-已戒
	SmokingHistory *int32 `protobuf:"varint,12,opt,name=smoking_history,json=smokingHistory,proto3,oneof" json:"smoking_history,omitempty"`
	// Drinking history | 饮酒史: 1-无, 2-有, 3-一般, 4-多, 5-已戒
	DrinkingHistory *int32 `protobuf:"varint,13,opt,name=drinking_history,json=drinkingHistory,proto3,oneof" json:"drinking_history,omitempty"`
	// Allergy history | 过敏史: 1-无, 2-有
	AllergyHistory *int32 `protobuf:"varint,14,opt,name=allergy_history,json=allergyHistory,proto3,oneof" json:"allergy_history,omitempty"`
	// Heart rate (beats/min) | 心率(次/分)
	HeartRate *int32 `protobuf:"varint,15,opt,name=heart_rate,json=heartRate,proto3,oneof" json:"heart_rate,omitempty"`
	// Blood pressure (mmHg) | 血压(mmHg)
	BloodPressure *string `protobuf:"bytes,16,opt,name=blood_pressure,json=bloodPressure,proto3,oneof" json:"blood_pressure,omitempty"`
	// Oxygen saturation (%) | 指脉氧(%)
	OxygenSaturation *float64 `protobuf:"fixed64,17,opt,name=oxygen_saturation,json=oxygenSaturation,proto3,oneof" json:"oxygen_saturation,omitempty"`
	// Blood glucose (mmol/L) | 血糖(mmol/L)
	BloodGlucose *float64 `protobuf:"fixed64,18,opt,name=blood_glucose,json=bloodGlucose,proto3,oneof" json:"blood_glucose,omitempty"`
	// Weight (kg) | 体重(kg)
	Weight *float64 `protobuf:"fixed64,19,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
	// Waist circumference (cm) | 腰围(cm)
	WaistCircumference *float64 `protobuf:"fixed64,20,opt,name=waist_circumference,json=waistCircumference,proto3,oneof" json:"waist_circumference,omitempty"`
	// Body fat percentage (%) | 体脂数(%)
	BodyFat *float64 `protobuf:"fixed64,21,opt,name=body_fat,json=bodyFat,proto3,oneof" json:"body_fat,omitempty"`
	// Diagnosis | 诊断
	Diagnosis *string `protobuf:"bytes,22,opt,name=diagnosis,proto3,oneof" json:"diagnosis,omitempty"`
	// Diet therapy | 饮食治疗
	DietTherapy *int32 `protobuf:"varint,23,opt,name=diet_therapy,json=dietTherapy,proto3,oneof" json:"diet_therapy,omitempty"`
	// Exercise therapy | 运动治疗
	ExerciseTherapy *int32 `protobuf:"varint,24,opt,name=exercise_therapy,json=exerciseTherapy,proto3,oneof" json:"exercise_therapy,omitempty"`
	// Medication therapy | 药物治疗
	MedicationTherapy *int32 `protobuf:"varint,25,opt,name=medication_therapy,json=medicationTherapy,proto3,oneof" json:"medication_therapy,omitempty"`
	// Overall treatment plan | 综合治疗方案
	TreatmentPlan *string `protobuf:"bytes,26,opt,name=treatment_plan,json=treatmentPlan,proto3,oneof" json:"treatment_plan,omitempty"`
	// Doctor ID | 医生ID
	DoctorId *string `protobuf:"bytes,27,opt,name=doctor_id,json=doctorId,proto3,oneof" json:"doctor_id,omitempty"`
	// Related appointment ID | 关联预约ID
	AppointmentId *string `protobuf:"bytes,28,opt,name=appointment_id,json=appointmentId,proto3,oneof" json:"appointment_id,omitempty"`
	// Remarks | 备注信息
	Remarks *string `protobuf:"bytes,29,opt,name=remarks,proto3,oneof" json:"remarks,omitempty"`
	// User ID | 用户ID
	UserId *string `protobuf:"bytes,30,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
}

func (x *MedicalRecordInfo) Reset() {
	*x = MedicalRecordInfo{}
	mi := &file_rpc_core_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MedicalRecordInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicalRecordInfo) ProtoMessage() {}

func (x *MedicalRecordInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicalRecordInfo.ProtoReflect.Descriptor instead.
func (*MedicalRecordInfo) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{29}
}

func (x *MedicalRecordInfo) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *MedicalRecordInfo) GetCreatedAt() int64 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

func (x *MedicalRecordInfo) GetUpdatedAt() int64 {
	if x != nil && x.UpdatedAt != nil {
		return *x.UpdatedAt
	}
	return 0
}

func (x *MedicalRecordInfo) GetPatientName() string {
	if x != nil && x.PatientName != nil {
		return *x.PatientName
	}
	return ""
}

func (x *MedicalRecordInfo) GetGender() int32 {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return 0
}

func (x *MedicalRecordInfo) GetAge() int32 {
	if x != nil && x.Age != nil {
		return *x.Age
	}
	return 0
}

func (x *MedicalRecordInfo) GetIdCardNumber() string {
	if x != nil && x.IdCardNumber != nil {
		return *x.IdCardNumber
	}
	return ""
}

func (x *MedicalRecordInfo) GetPhoneNumber() string {
	if x != nil && x.PhoneNumber != nil {
		return *x.PhoneNumber
	}
	return ""
}

func (x *MedicalRecordInfo) GetChiefComplaint() string {
	if x != nil && x.ChiefComplaint != nil {
		return *x.ChiefComplaint
	}
	return ""
}

func (x *MedicalRecordInfo) GetPresentIllness() string {
	if x != nil && x.PresentIllness != nil {
		return *x.PresentIllness
	}
	return ""
}

func (x *MedicalRecordInfo) GetPastHistory() string {
	if x != nil && x.PastHistory != nil {
		return *x.PastHistory
	}
	return ""
}

func (x *MedicalRecordInfo) GetSmokingHistory() int32 {
	if x != nil && x.SmokingHistory != nil {
		return *x.SmokingHistory
	}
	return 0
}

func (x *MedicalRecordInfo) GetDrinkingHistory() int32 {
	if x != nil && x.DrinkingHistory != nil {
		return *x.DrinkingHistory
	}
	return 0
}

func (x *MedicalRecordInfo) GetAllergyHistory() int32 {
	if x != nil && x.AllergyHistory != nil {
		return *x.AllergyHistory
	}
	return 0
}

func (x *MedicalRecordInfo) GetHeartRate() int32 {
	if x != nil && x.HeartRate != nil {
		return *x.HeartRate
	}
	return 0
}

func (x *MedicalRecordInfo) GetBloodPressure() string {
	if x != nil && x.BloodPressure != nil {
		return *x.BloodPressure
	}
	return ""
}

func (x *MedicalRecordInfo) GetOxygenSaturation() float64 {
	if x != nil && x.OxygenSaturation != nil {
		return *x.OxygenSaturation
	}
	return 0
}

func (x *MedicalRecordInfo) GetBloodGlucose() float64 {
	if x != nil && x.BloodGlucose != nil {
		return *x.BloodGlucose
	}
	return 0
}

func (x *MedicalRecordInfo) GetWeight() float64 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *MedicalRecordInfo) GetWaistCircumference() float64 {
	if x != nil && x.WaistCircumference != nil {
		return *x.WaistCircumference
	}
	return 0
}

func (x *MedicalRecordInfo) GetBodyFat() float64 {
	if x != nil && x.BodyFat != nil {
		return *x.BodyFat
	}
	return 0
}

func (x *MedicalRecordInfo) GetDiagnosis() string {
	if x != nil && x.Diagnosis != nil {
		return *x.Diagnosis
	}
	return ""
}

func (x *MedicalRecordInfo) GetDietTherapy() int32 {
	if x != nil && x.DietTherapy != nil {
		return *x.DietTherapy
	}
	return 0
}

func (x *MedicalRecordInfo) GetExerciseTherapy() int32 {
	if x != nil && x.ExerciseTherapy != nil {
		return *x.ExerciseTherapy
	}
	return 0
}

func (x *MedicalRecordInfo) GetMedicationTherapy() int32 {
	if x != nil && x.MedicationTherapy != nil {
		return *x.MedicationTherapy
	}
	return 0
}

func (x *MedicalRecordInfo) GetTreatmentPlan() string {
	if x != nil && x.TreatmentPlan != nil {
		return *x.TreatmentPlan
	}
	return ""
}

func (x *MedicalRecordInfo) GetDoctorId() string {
	if x != nil && x.DoctorId != nil {
		return *x.DoctorId
	}
	return ""
}

func (x *MedicalRecordInfo) GetAppointmentId() string {
	if x != nil && x.AppointmentId != nil {
		return *x.AppointmentId
	}
	return ""
}

func (x *MedicalRecordInfo) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

func (x *MedicalRecordInfo) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

type MedicalRecordListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page         uint64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize     uint64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PatientName  *string `protobuf:"bytes,3,opt,name=patient_name,json=patientName,proto3,oneof" json:"patient_name,omitempty"`
	IdCardNumber *string `protobuf:"bytes,4,opt,name=id_card_number,json=idCardNumber,proto3,oneof" json:"id_card_number,omitempty"`
	PhoneNumber  *string `protobuf:"bytes,5,opt,name=phone_number,json=phoneNumber,proto3,oneof" json:"phone_number,omitempty"`
}

func (x *MedicalRecordListReq) Reset() {
	*x = MedicalRecordListReq{}
	mi := &file_rpc_core_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MedicalRecordListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicalRecordListReq) ProtoMessage() {}

func (x *MedicalRecordListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicalRecordListReq.ProtoReflect.Descriptor instead.
func (*MedicalRecordListReq) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{30}
}

func (x *MedicalRecordListReq) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *MedicalRecordListReq) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *MedicalRecordListReq) GetPatientName() string {
	if x != nil && x.PatientName != nil {
		return *x.PatientName
	}
	return ""
}

func (x *MedicalRecordListReq) GetIdCardNumber() string {
	if x != nil && x.IdCardNumber != nil {
		return *x.IdCardNumber
	}
	return ""
}

func (x *MedicalRecordListReq) GetPhoneNumber() string {
	if x != nil && x.PhoneNumber != nil {
		return *x.PhoneNumber
	}
	return ""
}

type MedicalRecordListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64               `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*MedicalRecordInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *MedicalRecordListResp) Reset() {
	*x = MedicalRecordListResp{}
	mi := &file_rpc_core_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MedicalRecordListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicalRecordListResp) ProtoMessage() {}

func (x *MedicalRecordListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicalRecordListResp.ProtoReflect.Descriptor instead.
func (*MedicalRecordListResp) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{31}
}

func (x *MedicalRecordListResp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *MedicalRecordListResp) GetData() []*MedicalRecordInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type MedicineInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *uint64 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	CreatedAt *int64  `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	UpdatedAt *int64  `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	// Status 1: normal 2: ban | 状态 1 正常 2 禁用
	Status *uint32 `protobuf:"varint,4,opt,name=status,proto3,oneof" json:"status,omitempty"`
	// Sort Number | 排序编号
	Sort *uint32 `protobuf:"varint,5,opt,name=sort,proto3,oneof" json:"sort,omitempty"`
	// Medicine chinese name | 药品中文名称
	NameZh *string `protobuf:"bytes,6,opt,name=name_zh,json=nameZh,proto3,oneof" json:"name_zh,omitempty"`
	// Medicine english name | 药品英文名称
	NameEn *string `protobuf:"bytes,7,opt,name=name_en,json=nameEn,proto3,oneof" json:"name_en,omitempty"`
	// Medicine russian name | 药品俄语名称
	NameRu *string `protobuf:"bytes,8,opt,name=name_ru,json=nameRu,proto3,oneof" json:"name_ru,omitempty"`
	// Medicine kazakh name | 药品哈萨克语名称
	NameKk *string `protobuf:"bytes,9,opt,name=name_kk,json=nameKk,proto3,oneof" json:"name_kk,omitempty"`
	// Quantity in stock | 库存数量
	Quantity *uint32 `protobuf:"varint,10,opt,name=quantity,proto3,oneof" json:"quantity,omitempty"`
	// Description chinese | 药品中文描述
	DescriptionZh *string `protobuf:"bytes,11,opt,name=description_zh,json=descriptionZh,proto3,oneof" json:"description_zh,omitempty"`
	// Description english | 药品英文描述
	DescriptionEn *string `protobuf:"bytes,12,opt,name=description_en,json=descriptionEn,proto3,oneof" json:"description_en,omitempty"`
	// Description russian | 药品俄语描述
	DescriptionRu *string `protobuf:"bytes,13,opt,name=description_ru,json=descriptionRu,proto3,oneof" json:"description_ru,omitempty"`
	// Description kazakh | 药品哈萨克语描述
	DescriptionKk *string `protobuf:"bytes,14,opt,name=description_kk,json=descriptionKk,proto3,oneof" json:"description_kk,omitempty"`
	// Remarks | 备注信息
	Remarks *string `protobuf:"bytes,15,opt,name=remarks,proto3,oneof" json:"remarks,omitempty"`
	// Images | 图片路径
	Images *string `protobuf:"bytes,16,opt,name=images,proto3,oneof" json:"images,omitempty"`
}

func (x *MedicineInfo) Reset() {
	*x = MedicineInfo{}
	mi := &file_rpc_core_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MedicineInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicineInfo) ProtoMessage() {}

func (x *MedicineInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicineInfo.ProtoReflect.Descriptor instead.
func (*MedicineInfo) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{32}
}

func (x *MedicineInfo) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *MedicineInfo) GetCreatedAt() int64 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

func (x *MedicineInfo) GetUpdatedAt() int64 {
	if x != nil && x.UpdatedAt != nil {
		return *x.UpdatedAt
	}
	return 0
}

func (x *MedicineInfo) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *MedicineInfo) GetSort() uint32 {
	if x != nil && x.Sort != nil {
		return *x.Sort
	}
	return 0
}

func (x *MedicineInfo) GetNameZh() string {
	if x != nil && x.NameZh != nil {
		return *x.NameZh
	}
	return ""
}

func (x *MedicineInfo) GetNameEn() string {
	if x != nil && x.NameEn != nil {
		return *x.NameEn
	}
	return ""
}

func (x *MedicineInfo) GetNameRu() string {
	if x != nil && x.NameRu != nil {
		return *x.NameRu
	}
	return ""
}

func (x *MedicineInfo) GetNameKk() string {
	if x != nil && x.NameKk != nil {
		return *x.NameKk
	}
	return ""
}

func (x *MedicineInfo) GetQuantity() uint32 {
	if x != nil && x.Quantity != nil {
		return *x.Quantity
	}
	return 0
}

func (x *MedicineInfo) GetDescriptionZh() string {
	if x != nil && x.DescriptionZh != nil {
		return *x.DescriptionZh
	}
	return ""
}

func (x *MedicineInfo) GetDescriptionEn() string {
	if x != nil && x.DescriptionEn != nil {
		return *x.DescriptionEn
	}
	return ""
}

func (x *MedicineInfo) GetDescriptionRu() string {
	if x != nil && x.DescriptionRu != nil {
		return *x.DescriptionRu
	}
	return ""
}

func (x *MedicineInfo) GetDescriptionKk() string {
	if x != nil && x.DescriptionKk != nil {
		return *x.DescriptionKk
	}
	return ""
}

func (x *MedicineInfo) GetRemarks() string {
	if x != nil && x.Remarks != nil {
		return *x.Remarks
	}
	return ""
}

func (x *MedicineInfo) GetImages() string {
	if x != nil && x.Images != nil {
		return *x.Images
	}
	return ""
}

type MedicineListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     uint64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize uint64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	NameZh   *string `protobuf:"bytes,3,opt,name=name_zh,json=nameZh,proto3,oneof" json:"name_zh,omitempty"`
	NameEn   *string `protobuf:"bytes,4,opt,name=name_en,json=nameEn,proto3,oneof" json:"name_en,omitempty"`
	NameRu   *string `protobuf:"bytes,5,opt,name=name_ru,json=nameRu,proto3,oneof" json:"name_ru,omitempty"`
}

func (x *MedicineListReq) Reset() {
	*x = MedicineListReq{}
	mi := &file_rpc_core_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MedicineListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicineListReq) ProtoMessage() {}

func (x *MedicineListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicineListReq.ProtoReflect.Descriptor instead.
func (*MedicineListReq) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{33}
}

func (x *MedicineListReq) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *MedicineListReq) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *MedicineListReq) GetNameZh() string {
	if x != nil && x.NameZh != nil {
		return *x.NameZh
	}
	return ""
}

func (x *MedicineListReq) GetNameEn() string {
	if x != nil && x.NameEn != nil {
		return *x.NameEn
	}
	return ""
}

func (x *MedicineListReq) GetNameRu() string {
	if x != nil && x.NameRu != nil {
		return *x.NameRu
	}
	return ""
}

type MedicineListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64          `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*MedicineInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *MedicineListResp) Reset() {
	*x = MedicineListResp{}
	mi := &file_rpc_core_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MedicineListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicineListResp) ProtoMessage() {}

func (x *MedicineListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicineListResp.ProtoReflect.Descriptor instead.
func (*MedicineListResp) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{34}
}

func (x *MedicineListResp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *MedicineListResp) GetData() []*MedicineInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type MenuInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *uint64 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	CreatedAt   *int64  `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	UpdatedAt   *int64  `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	Level       *uint32 `protobuf:"varint,4,opt,name=level,proto3,oneof" json:"level,omitempty"`
	ParentId    *uint64 `protobuf:"varint,5,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	Path        *string `protobuf:"bytes,6,opt,name=path,proto3,oneof" json:"path,omitempty"`
	Name        *string `protobuf:"bytes,7,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Redirect    *string `protobuf:"bytes,8,opt,name=redirect,proto3,oneof" json:"redirect,omitempty"`
	Component   *string `protobuf:"bytes,9,opt,name=component,proto3,oneof" json:"component,omitempty"`
	Sort        *uint32 `protobuf:"varint,10,opt,name=sort,proto3,oneof" json:"sort,omitempty"`
	Disabled    *bool   `protobuf:"varint,11,opt,name=disabled,proto3,oneof" json:"disabled,omitempty"`
	Meta        *Meta   `protobuf:"bytes,12,opt,name=meta,proto3,oneof" json:"meta,omitempty"`
	MenuType    *uint32 `protobuf:"varint,13,opt,name=menu_type,json=menuType,proto3,oneof" json:"menu_type,omitempty"`
	ServiceName *string `protobuf:"bytes,14,opt,name=service_name,json=serviceName,proto3,oneof" json:"service_name,omitempty"`
	Permission  *string `protobuf:"bytes,15,opt,name=permission,proto3,oneof" json:"permission,omitempty"`
}

func (x *MenuInfo) Reset() {
	*x = MenuInfo{}
	mi := &file_rpc_core_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MenuInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MenuInfo) ProtoMessage() {}

func (x *MenuInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MenuInfo.ProtoReflect.Descriptor instead.
func (*MenuInfo) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{35}
}

func (x *MenuInfo) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *MenuInfo) GetCreatedAt() int64 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

func (x *MenuInfo) GetUpdatedAt() int64 {
	if x != nil && x.UpdatedAt != nil {
		return *x.UpdatedAt
	}
	return 0
}

func (x *MenuInfo) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *MenuInfo) GetParentId() uint64 {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return 0
}

func (x *MenuInfo) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *MenuInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *MenuInfo) GetRedirect() string {
	if x != nil && x.Redirect != nil {
		return *x.Redirect
	}
	return ""
}

func (x *MenuInfo) GetComponent() string {
	if x != nil && x.Component != nil {
		return *x.Component
	}
	return ""
}

func (x *MenuInfo) GetSort() uint32 {
	if x != nil && x.Sort != nil {
		return *x.Sort
	}
	return 0
}

func (x *MenuInfo) GetDisabled() bool {
	if x != nil && x.Disabled != nil {
		return *x.Disabled
	}
	return false
}

func (x *MenuInfo) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *MenuInfo) GetMenuType() uint32 {
	if x != nil && x.MenuType != nil {
		return *x.MenuType
	}
	return 0
}

func (x *MenuInfo) GetServiceName() string {
	if x != nil && x.ServiceName != nil {
		return *x.ServiceName
	}
	return ""
}

func (x *MenuInfo) GetPermission() string {
	if x != nil && x.Permission != nil {
		return *x.Permission
	}
	return ""
}

type MenuInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64      `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*MenuInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *MenuInfoList) Reset() {
	*x = MenuInfoList{}
	mi := &file_rpc_core_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MenuInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MenuInfoList) ProtoMessage() {}

func (x *MenuInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MenuInfoList.ProtoReflect.Descriptor instead.
func (*MenuInfoList) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{36}
}

func (x *MenuInfoList) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *MenuInfoList) GetData() []*MenuInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type MenuRoleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MenuId uint64 `protobuf:"varint,2,opt,name=menu_id,json=menuId,proto3" json:"menu_id,omitempty"`
	RoleId uint64 `protobuf:"varint,3,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
}

func (x *MenuRoleInfo) Reset() {
	*x = MenuRoleInfo{}
	mi := &file_rpc_core_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MenuRoleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MenuRoleInfo) ProtoMessage() {}

func (x *MenuRoleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MenuRoleInfo.ProtoReflect.Descriptor instead.
func (*MenuRoleInfo) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{37}
}

func (x *MenuRoleInfo) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MenuRoleInfo) GetMenuId() uint64 {
	if x != nil {
		return x.MenuId
	}
	return 0
}

func (x *MenuRoleInfo) GetRoleId() uint64 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

type MenuRoleListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64          `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*MenuRoleInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *MenuRoleListResp) Reset() {
	*x = MenuRoleListResp{}
	mi := &file_rpc_core_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MenuRoleListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MenuRoleListResp) ProtoMessage() {}

func (x *MenuRoleListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MenuRoleListResp.ProtoReflect.Descriptor instead.
func (*MenuRoleListResp) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{38}
}

func (x *MenuRoleListResp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *MenuRoleListResp) GetData() []*MenuRoleInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type Meta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title              *string `protobuf:"bytes,1,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Icon               *string `protobuf:"bytes,2,opt,name=icon,proto3,oneof" json:"icon,omitempty"`
	HideMenu           *bool   `protobuf:"varint,3,opt,name=hide_menu,json=hideMenu,proto3,oneof" json:"hide_menu,omitempty"`
	HideBreadcrumb     *bool   `protobuf:"varint,4,opt,name=hide_breadcrumb,json=hideBreadcrumb,proto3,oneof" json:"hide_breadcrumb,omitempty"`
	IgnoreKeepAlive    *bool   `protobuf:"varint,5,opt,name=ignore_keep_alive,json=ignoreKeepAlive,proto3,oneof" json:"ignore_keep_alive,omitempty"`
	HideTab            *bool   `protobuf:"varint,6,opt,name=hide_tab,json=hideTab,proto3,oneof" json:"hide_tab,omitempty"`
	FrameSrc           *string `protobuf:"bytes,7,opt,name=frame_src,json=frameSrc,proto3,oneof" json:"frame_src,omitempty"`
	CarryParam         *bool   `protobuf:"varint,8,opt,name=carry_param,json=carryParam,proto3,oneof" json:"carry_param,omitempty"`
	HideChildrenInMenu *bool   `protobuf:"varint,9,opt,name=hide_children_in_menu,json=hideChildrenInMenu,proto3,oneof" json:"hide_children_in_menu,omitempty"`
	Affix              *bool   `protobuf:"varint,10,opt,name=affix,proto3,oneof" json:"affix,omitempty"`
	DynamicLevel       *uint32 `protobuf:"varint,11,opt,name=dynamic_level,json=dynamicLevel,proto3,oneof" json:"dynamic_level,omitempty"`
	RealPath           *string `protobuf:"bytes,12,opt,name=real_path,json=realPath,proto3,oneof" json:"real_path,omitempty"`
}

func (x *Meta) Reset() {
	*x = Meta{}
	mi := &file_rpc_core_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta) ProtoMessage() {}

func (x *Meta) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta.ProtoReflect.Descriptor instead.
func (*Meta) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{39}
}

func (x *Meta) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Meta) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

func (x *Meta) GetHideMenu() bool {
	if x != nil && x.HideMenu != nil {
		return *x.HideMenu
	}
	return false
}

func (x *Meta) GetHideBreadcrumb() bool {
	if x != nil && x.HideBreadcrumb != nil {
		return *x.HideBreadcrumb
	}
	return false
}

func (x *Meta) GetIgnoreKeepAlive() bool {
	if x != nil && x.IgnoreKeepAlive != nil {
		return *x.IgnoreKeepAlive
	}
	return false
}

func (x *Meta) GetHideTab() bool {
	if x != nil && x.HideTab != nil {
		return *x.HideTab
	}
	return false
}

func (x *Meta) GetFrameSrc() string {
	if x != nil && x.FrameSrc != nil {
		return *x.FrameSrc
	}
	return ""
}

func (x *Meta) GetCarryParam() bool {
	if x != nil && x.CarryParam != nil {
		return *x.CarryParam
	}
	return false
}

func (x *Meta) GetHideChildrenInMenu() bool {
	if x != nil && x.HideChildrenInMenu != nil {
		return *x.HideChildrenInMenu
	}
	return false
}

func (x *Meta) GetAffix() bool {
	if x != nil && x.Affix != nil {
		return *x.Affix
	}
	return false
}

func (x *Meta) GetDynamicLevel() uint32 {
	if x != nil && x.DynamicLevel != nil {
		return *x.DynamicLevel
	}
	return 0
}

func (x *Meta) GetRealPath() string {
	if x != nil && x.RealPath != nil {
		return *x.RealPath
	}
	return ""
}

type NewsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *uint64 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	CreatedAt *int64  `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	UpdatedAt *int64  `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	// Status 1: normal 2: ban | 状态 1 正常 2 禁用
	Status *uint32 `protobuf:"varint,4,opt,name=status,proto3,oneof" json:"status,omitempty"`
	// Sort Number | 排序编号
	Sort *uint32 `protobuf:"varint,5,opt,name=sort,proto3,oneof" json:"sort,omitempty"`
	// Chinese title | 中文标题
	TitleZh *string `protobuf:"bytes,6,opt,name=title_zh,json=titleZh,proto3,oneof" json:"title_zh,omitempty"`
	// English title | 英文标题
	TitleEn *string `protobuf:"bytes,7,opt,name=title_en,json=titleEn,proto3,oneof" json:"title_en,omitempty"`
	// Russian title | 俄语标题
	TitleRu *string `protobuf:"bytes,8,opt,name=title_ru,json=titleRu,proto3,oneof" json:"title_ru,omitempty"`
	// Kazakh title | 哈萨克语标题
	TitleKk *string `protobuf:"bytes,9,opt,name=title_kk,json=titleKk,proto3,oneof" json:"title_kk,omitempty"`
	// Chinese content | 中文内容
	ContentZh *string `protobuf:"bytes,10,opt,name=content_zh,json=contentZh,proto3,oneof" json:"content_zh,omitempty"`
	// English content | 英文内容
	ContentEn *string `protobuf:"bytes,11,opt,name=content_en,json=contentEn,proto3,oneof" json:"content_en,omitempty"`
	// Russian content | 俄语内容
	ContentRu *string `protobuf:"bytes,12,opt,name=content_ru,json=contentRu,proto3,oneof" json:"content_ru,omitempty"`
	// Kazakh content | 哈萨克语内容
	ContentKk *string `protobuf:"bytes,13,opt,name=content_kk,json=contentKk,proto3,oneof" json:"content_kk,omitempty"`
	// Cover image URL | 封面图片URL
	CoverUrl *string `protobuf:"bytes,14,opt,name=cover_url,json=coverUrl,proto3,oneof" json:"cover_url,omitempty"`
}

func (x *NewsInfo) Reset() {
	*x = NewsInfo{}
	mi := &file_rpc_core_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsInfo) ProtoMessage() {}

func (x *NewsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsInfo.ProtoReflect.Descriptor instead.
func (*NewsInfo) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{40}
}

func (x *NewsInfo) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *NewsInfo) GetCreatedAt() int64 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

func (x *NewsInfo) GetUpdatedAt() int64 {
	if x != nil && x.UpdatedAt != nil {
		return *x.UpdatedAt
	}
	return 0
}

func (x *NewsInfo) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *NewsInfo) GetSort() uint32 {
	if x != nil && x.Sort != nil {
		return *x.Sort
	}
	return 0
}

func (x *NewsInfo) GetTitleZh() string {
	if x != nil && x.TitleZh != nil {
		return *x.TitleZh
	}
	return ""
}

func (x *NewsInfo) GetTitleEn() string {
	if x != nil && x.TitleEn != nil {
		return *x.TitleEn
	}
	return ""
}

func (x *NewsInfo) GetTitleRu() string {
	if x != nil && x.TitleRu != nil {
		return *x.TitleRu
	}
	return ""
}

func (x *NewsInfo) GetTitleKk() string {
	if x != nil && x.TitleKk != nil {
		return *x.TitleKk
	}
	return ""
}

func (x *NewsInfo) GetContentZh() string {
	if x != nil && x.ContentZh != nil {
		return *x.ContentZh
	}
	return ""
}

func (x *NewsInfo) GetContentEn() string {
	if x != nil && x.ContentEn != nil {
		return *x.ContentEn
	}
	return ""
}

func (x *NewsInfo) GetContentRu() string {
	if x != nil && x.ContentRu != nil {
		return *x.ContentRu
	}
	return ""
}

func (x *NewsInfo) GetContentKk() string {
	if x != nil && x.ContentKk != nil {
		return *x.ContentKk
	}
	return ""
}

func (x *NewsInfo) GetCoverUrl() string {
	if x != nil && x.CoverUrl != nil {
		return *x.CoverUrl
	}
	return ""
}

type NewsListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     uint64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize uint64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	TitleZh  *string `protobuf:"bytes,3,opt,name=title_zh,json=titleZh,proto3,oneof" json:"title_zh,omitempty"`
	TitleEn  *string `protobuf:"bytes,4,opt,name=title_en,json=titleEn,proto3,oneof" json:"title_en,omitempty"`
	TitleRu  *string `protobuf:"bytes,5,opt,name=title_ru,json=titleRu,proto3,oneof" json:"title_ru,omitempty"`
}

func (x *NewsListReq) Reset() {
	*x = NewsListReq{}
	mi := &file_rpc_core_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewsListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsListReq) ProtoMessage() {}

func (x *NewsListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsListReq.ProtoReflect.Descriptor instead.
func (*NewsListReq) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{41}
}

func (x *NewsListReq) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *NewsListReq) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *NewsListReq) GetTitleZh() string {
	if x != nil && x.TitleZh != nil {
		return *x.TitleZh
	}
	return ""
}

func (x *NewsListReq) GetTitleEn() string {
	if x != nil && x.TitleEn != nil {
		return *x.TitleEn
	}
	return ""
}

func (x *NewsListReq) GetTitleRu() string {
	if x != nil && x.TitleRu != nil {
		return *x.TitleRu
	}
	return ""
}

type NewsListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64      `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*NewsInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *NewsListResp) Reset() {
	*x = NewsListResp{}
	mi := &file_rpc_core_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewsListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsListResp) ProtoMessage() {}

func (x *NewsListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsListResp.ProtoReflect.Descriptor instead.
func (*NewsListResp) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{42}
}

func (x *NewsListResp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *NewsListResp) GetData() []*NewsInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type OauthLoginReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State    string `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Provider string `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (x *OauthLoginReq) Reset() {
	*x = OauthLoginReq{}
	mi := &file_rpc_core_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OauthLoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OauthLoginReq) ProtoMessage() {}

func (x *OauthLoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OauthLoginReq.ProtoReflect.Descriptor instead.
func (*OauthLoginReq) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{43}
}

func (x *OauthLoginReq) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *OauthLoginReq) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

type OauthProviderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *uint64 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	CreatedAt    *int64  `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	UpdatedAt    *int64  `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	Name         *string `protobuf:"bytes,4,opt,name=name,proto3,oneof" json:"name,omitempty"`
	ClientId     *string `protobuf:"bytes,5,opt,name=client_id,json=clientId,proto3,oneof" json:"client_id,omitempty"`
	ClientSecret *string `protobuf:"bytes,6,opt,name=client_secret,json=clientSecret,proto3,oneof" json:"client_secret,omitempty"`
	RedirectUrl  *string `protobuf:"bytes,7,opt,name=redirect_url,json=redirectUrl,proto3,oneof" json:"redirect_url,omitempty"`
	Scopes       *string `protobuf:"bytes,8,opt,name=scopes,proto3,oneof" json:"scopes,omitempty"`
	AuthUrl      *string `protobuf:"bytes,9,opt,name=auth_url,json=authUrl,proto3,oneof" json:"auth_url,omitempty"`
	TokenUrl     *string `protobuf:"bytes,10,opt,name=token_url,json=tokenUrl,proto3,oneof" json:"token_url,omitempty"`
	AuthStyle    *uint64 `protobuf:"varint,11,opt,name=auth_style,json=authStyle,proto3,oneof" json:"auth_style,omitempty"`
	InfoUrl      *string `protobuf:"bytes,12,opt,name=info_url,json=infoUrl,proto3,oneof" json:"info_url,omitempty"`
}

func (x *OauthProviderInfo) Reset() {
	*x = OauthProviderInfo{}
	mi := &file_rpc_core_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OauthProviderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OauthProviderInfo) ProtoMessage() {}

func (x *OauthProviderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OauthProviderInfo.ProtoReflect.Descriptor instead.
func (*OauthProviderInfo) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{44}
}

func (x *OauthProviderInfo) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *OauthProviderInfo) GetCreatedAt() int64 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

func (x *OauthProviderInfo) GetUpdatedAt() int64 {
	if x != nil && x.UpdatedAt != nil {
		return *x.UpdatedAt
	}
	return 0
}

func (x *OauthProviderInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *OauthProviderInfo) GetClientId() string {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return ""
}

func (x *OauthProviderInfo) GetClientSecret() string {
	if x != nil && x.ClientSecret != nil {
		return *x.ClientSecret
	}
	return ""
}

func (x *OauthProviderInfo) GetRedirectUrl() string {
	if x != nil && x.RedirectUrl != nil {
		return *x.RedirectUrl
	}
	return ""
}

func (x *OauthProviderInfo) GetScopes() string {
	if x != nil && x.Scopes != nil {
		return *x.Scopes
	}
	return ""
}

func (x *OauthProviderInfo) GetAuthUrl() string {
	if x != nil && x.AuthUrl != nil {
		return *x.AuthUrl
	}
	return ""
}

func (x *OauthProviderInfo) GetTokenUrl() string {
	if x != nil && x.TokenUrl != nil {
		return *x.TokenUrl
	}
	return ""
}

func (x *OauthProviderInfo) GetAuthStyle() uint64 {
	if x != nil && x.AuthStyle != nil {
		return *x.AuthStyle
	}
	return 0
}

func (x *OauthProviderInfo) GetInfoUrl() string {
	if x != nil && x.InfoUrl != nil {
		return *x.InfoUrl
	}
	return ""
}

type OauthProviderListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     uint64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize uint64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Name     *string `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`
}

func (x *OauthProviderListReq) Reset() {
	*x = OauthProviderListReq{}
	mi := &file_rpc_core_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OauthProviderListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OauthProviderListReq) ProtoMessage() {}

func (x *OauthProviderListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OauthProviderListReq.ProtoReflect.Descriptor instead.
func (*OauthProviderListReq) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{45}
}

func (x *OauthProviderListReq) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *OauthProviderListReq) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *OauthProviderListReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type OauthProviderListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64               `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*OauthProviderInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *OauthProviderListResp) Reset() {
	*x = OauthProviderListResp{}
	mi := &file_rpc_core_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OauthProviderListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OauthProviderListResp) ProtoMessage() {}

func (x *OauthProviderListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OauthProviderListResp.ProtoReflect.Descriptor instead.
func (*OauthProviderListResp) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{46}
}

func (x *OauthProviderListResp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *OauthProviderListResp) GetData() []*OauthProviderInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type OauthRedirectResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *OauthRedirectResp) Reset() {
	*x = OauthRedirectResp{}
	mi := &file_rpc_core_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OauthRedirectResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OauthRedirectResp) ProtoMessage() {}

func (x *OauthRedirectResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OauthRedirectResp.ProtoReflect.Descriptor instead.
func (*OauthRedirectResp) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{47}
}

func (x *OauthRedirectResp) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type PageInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     uint64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize uint64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *PageInfoReq) Reset() {
	*x = PageInfoReq{}
	mi := &file_rpc_core_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PageInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageInfoReq) ProtoMessage() {}

func (x *PageInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageInfoReq.ProtoReflect.Descriptor instead.
func (*PageInfoReq) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{48}
}

func (x *PageInfoReq) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PageInfoReq) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type PositionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *uint64 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	CreatedAt *int64  `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	UpdatedAt *int64  `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	Status    *uint32 `protobuf:"varint,4,opt,name=status,proto3,oneof" json:"status,omitempty"`
	Sort      *uint32 `protobuf:"varint,5,opt,name=sort,proto3,oneof" json:"sort,omitempty"`
	Name      *string `protobuf:"bytes,6,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Code      *string `protobuf:"bytes,7,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Remark    *string `protobuf:"bytes,8,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
}

func (x *PositionInfo) Reset() {
	*x = PositionInfo{}
	mi := &file_rpc_core_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PositionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionInfo) ProtoMessage() {}

func (x *PositionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionInfo.ProtoReflect.Descriptor instead.
func (*PositionInfo) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{49}
}

func (x *PositionInfo) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *PositionInfo) GetCreatedAt() int64 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

func (x *PositionInfo) GetUpdatedAt() int64 {
	if x != nil && x.UpdatedAt != nil {
		return *x.UpdatedAt
	}
	return 0
}

func (x *PositionInfo) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *PositionInfo) GetSort() uint32 {
	if x != nil && x.Sort != nil {
		return *x.Sort
	}
	return 0
}

func (x *PositionInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PositionInfo) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *PositionInfo) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

type PositionListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     uint64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize uint64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Name     *string `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Code     *string `protobuf:"bytes,4,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Remark   *string `protobuf:"bytes,5,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
}

func (x *PositionListReq) Reset() {
	*x = PositionListReq{}
	mi := &file_rpc_core_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PositionListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionListReq) ProtoMessage() {}

func (x *PositionListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionListReq.ProtoReflect.Descriptor instead.
func (*PositionListReq) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{50}
}

func (x *PositionListReq) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PositionListReq) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PositionListReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PositionListReq) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *PositionListReq) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

type PositionListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64          `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*PositionInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *PositionListResp) Reset() {
	*x = PositionListResp{}
	mi := &file_rpc_core_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PositionListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionListResp) ProtoMessage() {}

func (x *PositionListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionListResp.ProtoReflect.Descriptor instead.
func (*PositionListResp) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{51}
}

func (x *PositionListResp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PositionListResp) GetData() []*PositionInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type RoleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *uint64 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	CreatedAt     *int64  `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	UpdatedAt     *int64  `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	Status        *uint32 `protobuf:"varint,4,opt,name=status,proto3,oneof" json:"status,omitempty"`
	Name          *string `protobuf:"bytes,5,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Code          *string `protobuf:"bytes,6,opt,name=code,proto3,oneof" json:"code,omitempty"`
	DefaultRouter *string `protobuf:"bytes,7,opt,name=default_router,json=defaultRouter,proto3,oneof" json:"default_router,omitempty"`
	Remark        *string `protobuf:"bytes,8,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	Sort          *uint32 `protobuf:"varint,9,opt,name=sort,proto3,oneof" json:"sort,omitempty"`
}

func (x *RoleInfo) Reset() {
	*x = RoleInfo{}
	mi := &file_rpc_core_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleInfo) ProtoMessage() {}

func (x *RoleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleInfo.ProtoReflect.Descriptor instead.
func (*RoleInfo) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{52}
}

func (x *RoleInfo) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *RoleInfo) GetCreatedAt() int64 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

func (x *RoleInfo) GetUpdatedAt() int64 {
	if x != nil && x.UpdatedAt != nil {
		return *x.UpdatedAt
	}
	return 0
}

func (x *RoleInfo) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *RoleInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RoleInfo) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *RoleInfo) GetDefaultRouter() string {
	if x != nil && x.DefaultRouter != nil {
		return *x.DefaultRouter
	}
	return ""
}

func (x *RoleInfo) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *RoleInfo) GetSort() uint32 {
	if x != nil && x.Sort != nil {
		return *x.Sort
	}
	return 0
}

type RoleListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page          uint64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      uint64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Name          *string `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Code          *string `protobuf:"bytes,4,opt,name=code,proto3,oneof" json:"code,omitempty"`
	DefaultRouter *string `protobuf:"bytes,5,opt,name=default_router,json=defaultRouter,proto3,oneof" json:"default_router,omitempty"`
}

func (x *RoleListReq) Reset() {
	*x = RoleListReq{}
	mi := &file_rpc_core_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoleListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleListReq) ProtoMessage() {}

func (x *RoleListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleListReq.ProtoReflect.Descriptor instead.
func (*RoleListReq) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{53}
}

func (x *RoleListReq) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *RoleListReq) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *RoleListReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RoleListReq) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *RoleListReq) GetDefaultRouter() string {
	if x != nil && x.DefaultRouter != nil {
		return *x.DefaultRouter
	}
	return ""
}

type RoleListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64      `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*RoleInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *RoleListResp) Reset() {
	*x = RoleListResp{}
	mi := &file_rpc_core_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoleListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleListResp) ProtoMessage() {}

func (x *RoleListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleListResp.ProtoReflect.Descriptor instead.
func (*RoleListResp) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{54}
}

func (x *RoleListResp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *RoleListResp) GetData() []*RoleInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

//  authorization message
type RoleMenuAuthorityReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleId  uint64   `protobuf:"varint,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	MenuIds []uint64 `protobuf:"varint,2,rep,packed,name=menu_ids,json=menuIds,proto3" json:"menu_ids,omitempty"`
}

func (x *RoleMenuAuthorityReq) Reset() {
	*x = RoleMenuAuthorityReq{}
	mi := &file_rpc_core_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoleMenuAuthorityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleMenuAuthorityReq) ProtoMessage() {}

func (x *RoleMenuAuthorityReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleMenuAuthorityReq.ProtoReflect.Descriptor instead.
func (*RoleMenuAuthorityReq) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{55}
}

func (x *RoleMenuAuthorityReq) GetRoleId() uint64 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *RoleMenuAuthorityReq) GetMenuIds() []uint64 {
	if x != nil {
		return x.MenuIds
	}
	return nil
}

//  return the role's authorization menu's ids
type RoleMenuAuthorityResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MenuIds []uint64 `protobuf:"varint,1,rep,packed,name=menu_ids,json=menuIds,proto3" json:"menu_ids,omitempty"`
}

func (x *RoleMenuAuthorityResp) Reset() {
	*x = RoleMenuAuthorityResp{}
	mi := &file_rpc_core_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoleMenuAuthorityResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleMenuAuthorityResp) ProtoMessage() {}

func (x *RoleMenuAuthorityResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleMenuAuthorityResp.ProtoReflect.Descriptor instead.
func (*RoleMenuAuthorityResp) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{56}
}

func (x *RoleMenuAuthorityResp) GetMenuIds() []uint64 {
	if x != nil {
		return x.MenuIds
	}
	return nil
}

type ServiceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *uint64 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	CreatedAt *int64  `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	UpdatedAt *int64  `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	// Status 1: normal 2: ban | 状态 1 正常 2 禁用
	Status *uint32 `protobuf:"varint,4,opt,name=status,proto3,oneof" json:"status,omitempty"`
	// Sort Number | 排序编号
	Sort *uint32 `protobuf:"varint,5,opt,name=sort,proto3,oneof" json:"sort,omitempty"`
	// Service chinese name | 服务中文名称
	NameZh *string `protobuf:"bytes,6,opt,name=name_zh,json=nameZh,proto3,oneof" json:"name_zh,omitempty"`
	// Service english name | 服务英文名称
	NameEn *string `protobuf:"bytes,7,opt,name=name_en,json=nameEn,proto3,oneof" json:"name_en,omitempty"`
	// Service russian name | 服务俄语名称
	NameRu *string `protobuf:"bytes,8,opt,name=name_ru,json=nameRu,proto3,oneof" json:"name_ru,omitempty"`
	// Service kazakh name | 服务哈萨克语名称
	NameKk *string `protobuf:"bytes,9,opt,name=name_kk,json=nameKk,proto3,oneof" json:"name_kk,omitempty"`
	// Description chinese | 服务中文描述
	DescriptionZh *string `protobuf:"bytes,10,opt,name=description_zh,json=descriptionZh,proto3,oneof" json:"description_zh,omitempty"`
	// Description english | 服务英文描述
	DescriptionEn *string `protobuf:"bytes,11,opt,name=description_en,json=descriptionEn,proto3,oneof" json:"description_en,omitempty"`
	// Description russian | 服务俄语描述
	DescriptionRu *string `protobuf:"bytes,12,opt,name=description_ru,json=descriptionRu,proto3,oneof" json:"description_ru,omitempty"`
	// Description kazakh | 服务哈萨克语描述
	DescriptionKk *string `protobuf:"bytes,13,opt,name=description_kk,json=descriptionKk,proto3,oneof" json:"description_kk,omitempty"`
	// Cover image URL | 封面图片URL
	CoverUrl *string `protobuf:"bytes,14,opt,name=cover_url,json=coverUrl,proto3,oneof" json:"cover_url,omitempty"`
}

func (x *ServiceInfo) Reset() {
	*x = ServiceInfo{}
	mi := &file_rpc_core_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceInfo) ProtoMessage() {}

func (x *ServiceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceInfo.ProtoReflect.Descriptor instead.
func (*ServiceInfo) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{57}
}

func (x *ServiceInfo) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ServiceInfo) GetCreatedAt() int64 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

func (x *ServiceInfo) GetUpdatedAt() int64 {
	if x != nil && x.UpdatedAt != nil {
		return *x.UpdatedAt
	}
	return 0
}

func (x *ServiceInfo) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *ServiceInfo) GetSort() uint32 {
	if x != nil && x.Sort != nil {
		return *x.Sort
	}
	return 0
}

func (x *ServiceInfo) GetNameZh() string {
	if x != nil && x.NameZh != nil {
		return *x.NameZh
	}
	return ""
}

func (x *ServiceInfo) GetNameEn() string {
	if x != nil && x.NameEn != nil {
		return *x.NameEn
	}
	return ""
}

func (x *ServiceInfo) GetNameRu() string {
	if x != nil && x.NameRu != nil {
		return *x.NameRu
	}
	return ""
}

func (x *ServiceInfo) GetNameKk() string {
	if x != nil && x.NameKk != nil {
		return *x.NameKk
	}
	return ""
}

func (x *ServiceInfo) GetDescriptionZh() string {
	if x != nil && x.DescriptionZh != nil {
		return *x.DescriptionZh
	}
	return ""
}

func (x *ServiceInfo) GetDescriptionEn() string {
	if x != nil && x.DescriptionEn != nil {
		return *x.DescriptionEn
	}
	return ""
}

func (x *ServiceInfo) GetDescriptionRu() string {
	if x != nil && x.DescriptionRu != nil {
		return *x.DescriptionRu
	}
	return ""
}

func (x *ServiceInfo) GetDescriptionKk() string {
	if x != nil && x.DescriptionKk != nil {
		return *x.DescriptionKk
	}
	return ""
}

func (x *ServiceInfo) GetCoverUrl() string {
	if x != nil && x.CoverUrl != nil {
		return *x.CoverUrl
	}
	return ""
}

type ServiceListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     uint64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize uint64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	NameZh   *string `protobuf:"bytes,3,opt,name=name_zh,json=nameZh,proto3,oneof" json:"name_zh,omitempty"`
	NameEn   *string `protobuf:"bytes,4,opt,name=name_en,json=nameEn,proto3,oneof" json:"name_en,omitempty"`
	NameRu   *string `protobuf:"bytes,5,opt,name=name_ru,json=nameRu,proto3,oneof" json:"name_ru,omitempty"`
}

func (x *ServiceListReq) Reset() {
	*x = ServiceListReq{}
	mi := &file_rpc_core_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceListReq) ProtoMessage() {}

func (x *ServiceListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceListReq.ProtoReflect.Descriptor instead.
func (*ServiceListReq) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{58}
}

func (x *ServiceListReq) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ServiceListReq) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ServiceListReq) GetNameZh() string {
	if x != nil && x.NameZh != nil {
		return *x.NameZh
	}
	return ""
}

func (x *ServiceListReq) GetNameEn() string {
	if x != nil && x.NameEn != nil {
		return *x.NameEn
	}
	return ""
}

func (x *ServiceListReq) GetNameRu() string {
	if x != nil && x.NameRu != nil {
		return *x.NameRu
	}
	return ""
}

type ServiceListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64         `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*ServiceInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ServiceListResp) Reset() {
	*x = ServiceListResp{}
	mi := &file_rpc_core_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceListResp) ProtoMessage() {}

func (x *ServiceListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceListResp.ProtoReflect.Descriptor instead.
func (*ServiceListResp) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{59}
}

func (x *ServiceListResp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ServiceListResp) GetData() []*ServiceInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type SwiperInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *uint64 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	CreatedAt *int64  `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	UpdatedAt *int64  `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	// Status 1: normal 2: ban | 状态 1 正常 2 禁用
	Status *uint32 `protobuf:"varint,4,opt,name=status,proto3,oneof" json:"status,omitempty"`
	// Sort Number | 排序编号
	Sort *uint32 `protobuf:"varint,5,opt,name=sort,proto3,oneof" json:"sort,omitempty"`
	// Chinese title | 中文标题
	TitleZh *string `protobuf:"bytes,6,opt,name=title_zh,json=titleZh,proto3,oneof" json:"title_zh,omitempty"`
	// English title | 英文标题
	TitleEn *string `protobuf:"bytes,7,opt,name=title_en,json=titleEn,proto3,oneof" json:"title_en,omitempty"`
	// Russian title | 俄语标题
	TitleRu *string `protobuf:"bytes,8,opt,name=title_ru,json=titleRu,proto3,oneof" json:"title_ru,omitempty"`
	// Kazakh title | 哈萨克语标题
	TitleKk *string `protobuf:"bytes,9,opt,name=title_kk,json=titleKk,proto3,oneof" json:"title_kk,omitempty"`
	// Chinese banner image | 中文轮播图
	BannerZh *string `protobuf:"bytes,10,opt,name=banner_zh,json=bannerZh,proto3,oneof" json:"banner_zh,omitempty"`
	// English banner image | 英文轮播图
	BannerEn *string `protobuf:"bytes,11,opt,name=banner_en,json=bannerEn,proto3,oneof" json:"banner_en,omitempty"`
	// Russian banner image | 俄语轮播图
	BannerRu *string `protobuf:"bytes,12,opt,name=banner_ru,json=bannerRu,proto3,oneof" json:"banner_ru,omitempty"`
	// Kazakh banner image | 哈萨克语轮播图
	BannerKk *string `protobuf:"bytes,13,opt,name=banner_kk,json=bannerKk,proto3,oneof" json:"banner_kk,omitempty"`
	// Chinese content | 中文内容
	ContentZh *string `protobuf:"bytes,14,opt,name=content_zh,json=contentZh,proto3,oneof" json:"content_zh,omitempty"`
	// English content | 英文内容
	ContentEn *string `protobuf:"bytes,15,opt,name=content_en,json=contentEn,proto3,oneof" json:"content_en,omitempty"`
	// Russian content | 俄语内容
	ContentRu *string `protobuf:"bytes,16,opt,name=content_ru,json=contentRu,proto3,oneof" json:"content_ru,omitempty"`
	// Kazakh content | 哈萨克语内容
	ContentKk *string `protobuf:"bytes,17,opt,name=content_kk,json=contentKk,proto3,oneof" json:"content_kk,omitempty"`
	// Jump Url | 跳转地址
	JumpUrl *string `protobuf:"bytes,18,opt,name=jump_url,json=jumpUrl,proto3,oneof" json:"jump_url,omitempty"`
}

func (x *SwiperInfo) Reset() {
	*x = SwiperInfo{}
	mi := &file_rpc_core_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SwiperInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwiperInfo) ProtoMessage() {}

func (x *SwiperInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwiperInfo.ProtoReflect.Descriptor instead.
func (*SwiperInfo) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{60}
}

func (x *SwiperInfo) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *SwiperInfo) GetCreatedAt() int64 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

func (x *SwiperInfo) GetUpdatedAt() int64 {
	if x != nil && x.UpdatedAt != nil {
		return *x.UpdatedAt
	}
	return 0
}

func (x *SwiperInfo) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *SwiperInfo) GetSort() uint32 {
	if x != nil && x.Sort != nil {
		return *x.Sort
	}
	return 0
}

func (x *SwiperInfo) GetTitleZh() string {
	if x != nil && x.TitleZh != nil {
		return *x.TitleZh
	}
	return ""
}

func (x *SwiperInfo) GetTitleEn() string {
	if x != nil && x.TitleEn != nil {
		return *x.TitleEn
	}
	return ""
}

func (x *SwiperInfo) GetTitleRu() string {
	if x != nil && x.TitleRu != nil {
		return *x.TitleRu
	}
	return ""
}

func (x *SwiperInfo) GetTitleKk() string {
	if x != nil && x.TitleKk != nil {
		return *x.TitleKk
	}
	return ""
}

func (x *SwiperInfo) GetBannerZh() string {
	if x != nil && x.BannerZh != nil {
		return *x.BannerZh
	}
	return ""
}

func (x *SwiperInfo) GetBannerEn() string {
	if x != nil && x.BannerEn != nil {
		return *x.BannerEn
	}
	return ""
}

func (x *SwiperInfo) GetBannerRu() string {
	if x != nil && x.BannerRu != nil {
		return *x.BannerRu
	}
	return ""
}

func (x *SwiperInfo) GetBannerKk() string {
	if x != nil && x.BannerKk != nil {
		return *x.BannerKk
	}
	return ""
}

func (x *SwiperInfo) GetContentZh() string {
	if x != nil && x.ContentZh != nil {
		return *x.ContentZh
	}
	return ""
}

func (x *SwiperInfo) GetContentEn() string {
	if x != nil && x.ContentEn != nil {
		return *x.ContentEn
	}
	return ""
}

func (x *SwiperInfo) GetContentRu() string {
	if x != nil && x.ContentRu != nil {
		return *x.ContentRu
	}
	return ""
}

func (x *SwiperInfo) GetContentKk() string {
	if x != nil && x.ContentKk != nil {
		return *x.ContentKk
	}
	return ""
}

func (x *SwiperInfo) GetJumpUrl() string {
	if x != nil && x.JumpUrl != nil {
		return *x.JumpUrl
	}
	return ""
}

type SwiperListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     uint64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize uint64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	TitleZh  *string `protobuf:"bytes,3,opt,name=title_zh,json=titleZh,proto3,oneof" json:"title_zh,omitempty"`
	TitleEn  *string `protobuf:"bytes,4,opt,name=title_en,json=titleEn,proto3,oneof" json:"title_en,omitempty"`
	TitleRu  *string `protobuf:"bytes,5,opt,name=title_ru,json=titleRu,proto3,oneof" json:"title_ru,omitempty"`
}

func (x *SwiperListReq) Reset() {
	*x = SwiperListReq{}
	mi := &file_rpc_core_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SwiperListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwiperListReq) ProtoMessage() {}

func (x *SwiperListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwiperListReq.ProtoReflect.Descriptor instead.
func (*SwiperListReq) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{61}
}

func (x *SwiperListReq) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SwiperListReq) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SwiperListReq) GetTitleZh() string {
	if x != nil && x.TitleZh != nil {
		return *x.TitleZh
	}
	return ""
}

func (x *SwiperListReq) GetTitleEn() string {
	if x != nil && x.TitleEn != nil {
		return *x.TitleEn
	}
	return ""
}

func (x *SwiperListReq) GetTitleRu() string {
	if x != nil && x.TitleRu != nil {
		return *x.TitleRu
	}
	return ""
}

type SwiperListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64        `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*SwiperInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *SwiperListResp) Reset() {
	*x = SwiperListResp{}
	mi := &file_rpc_core_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SwiperListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwiperListResp) ProtoMessage() {}

func (x *SwiperListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwiperListResp.ProtoReflect.Descriptor instead.
func (*SwiperListResp) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{62}
}

func (x *SwiperListResp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SwiperListResp) GetData() []*SwiperInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type TokenInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *string `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	CreatedAt *int64  `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	UpdatedAt *int64  `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	Status    *uint32 `protobuf:"varint,4,opt,name=status,proto3,oneof" json:"status,omitempty"`
	Uuid      *string `protobuf:"bytes,5,opt,name=uuid,proto3,oneof" json:"uuid,omitempty"`
	Token     *string `protobuf:"bytes,6,opt,name=token,proto3,oneof" json:"token,omitempty"`
	Source    *string `protobuf:"bytes,7,opt,name=source,proto3,oneof" json:"source,omitempty"`
	ExpiredAt *int64  `protobuf:"varint,8,opt,name=expired_at,json=expiredAt,proto3,oneof" json:"expired_at,omitempty"`
	Username  *string `protobuf:"bytes,9,opt,name=username,proto3,oneof" json:"username,omitempty"`
}

func (x *TokenInfo) Reset() {
	*x = TokenInfo{}
	mi := &file_rpc_core_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenInfo) ProtoMessage() {}

func (x *TokenInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenInfo.ProtoReflect.Descriptor instead.
func (*TokenInfo) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{63}
}

func (x *TokenInfo) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *TokenInfo) GetCreatedAt() int64 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

func (x *TokenInfo) GetUpdatedAt() int64 {
	if x != nil && x.UpdatedAt != nil {
		return *x.UpdatedAt
	}
	return 0
}

func (x *TokenInfo) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *TokenInfo) GetUuid() string {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return ""
}

func (x *TokenInfo) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

func (x *TokenInfo) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *TokenInfo) GetExpiredAt() int64 {
	if x != nil && x.ExpiredAt != nil {
		return *x.ExpiredAt
	}
	return 0
}

func (x *TokenInfo) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

type TokenListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     uint64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize uint64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Username *string `protobuf:"bytes,3,opt,name=username,proto3,oneof" json:"username,omitempty"`
	Nickname *string `protobuf:"bytes,4,opt,name=nickname,proto3,oneof" json:"nickname,omitempty"`
	Email    *string `protobuf:"bytes,5,opt,name=email,proto3,oneof" json:"email,omitempty"`
	Uuid     *string `protobuf:"bytes,6,opt,name=uuid,proto3,oneof" json:"uuid,omitempty"`
}

func (x *TokenListReq) Reset() {
	*x = TokenListReq{}
	mi := &file_rpc_core_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenListReq) ProtoMessage() {}

func (x *TokenListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenListReq.ProtoReflect.Descriptor instead.
func (*TokenListReq) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{64}
}

func (x *TokenListReq) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *TokenListReq) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *TokenListReq) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *TokenListReq) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *TokenListReq) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *TokenListReq) GetUuid() string {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return ""
}

type TokenListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64       `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*TokenInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *TokenListResp) Reset() {
	*x = TokenListResp{}
	mi := &file_rpc_core_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenListResp) ProtoMessage() {}

func (x *TokenListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenListResp.ProtoReflect.Descriptor instead.
func (*TokenListResp) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{65}
}

func (x *TokenListResp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TokenListResp) GetData() []*TokenInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type UUIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UUIDReq) Reset() {
	*x = UUIDReq{}
	mi := &file_rpc_core_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UUIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UUIDReq) ProtoMessage() {}

func (x *UUIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UUIDReq.ProtoReflect.Descriptor instead.
func (*UUIDReq) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{66}
}

func (x *UUIDReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UUIDsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *UUIDsReq) Reset() {
	*x = UUIDsReq{}
	mi := &file_rpc_core_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UUIDsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UUIDsReq) ProtoMessage() {}

func (x *UUIDsReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UUIDsReq.ProtoReflect.Descriptor instead.
func (*UUIDsReq) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{67}
}

func (x *UUIDsReq) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *string  `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	CreatedAt      *int64   `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	UpdatedAt      *int64   `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	Status         *uint32  `protobuf:"varint,4,opt,name=status,proto3,oneof" json:"status,omitempty"`
	Username       *string  `protobuf:"bytes,5,opt,name=username,proto3,oneof" json:"username,omitempty"`
	Password       *string  `protobuf:"bytes,6,opt,name=password,proto3,oneof" json:"password,omitempty"`
	Nickname       *string  `protobuf:"bytes,7,opt,name=nickname,proto3,oneof" json:"nickname,omitempty"`
	Description    *string  `protobuf:"bytes,8,opt,name=description,proto3,oneof" json:"description,omitempty"`
	HomePath       *string  `protobuf:"bytes,9,opt,name=home_path,json=homePath,proto3,oneof" json:"home_path,omitempty"`
	RoleIds        []uint64 `protobuf:"varint,10,rep,packed,name=role_ids,json=roleIds,proto3" json:"role_ids,omitempty"`
	Mobile         *string  `protobuf:"bytes,11,opt,name=mobile,proto3,oneof" json:"mobile,omitempty"`
	Email          *string  `protobuf:"bytes,12,opt,name=email,proto3,oneof" json:"email,omitempty"`
	Avatar         *string  `protobuf:"bytes,13,opt,name=avatar,proto3,oneof" json:"avatar,omitempty"`
	DepartmentId   *uint64  `protobuf:"varint,14,opt,name=department_id,json=departmentId,proto3,oneof" json:"department_id,omitempty"`
	PositionIds    []uint64 `protobuf:"varint,15,rep,packed,name=position_ids,json=positionIds,proto3" json:"position_ids,omitempty"`
	RoleCodes      []string `protobuf:"bytes,16,rep,name=role_codes,json=roleCodes,proto3" json:"role_codes,omitempty"`
	RoleName       []string `protobuf:"bytes,17,rep,name=role_name,json=roleName,proto3" json:"role_name,omitempty"`
	DepartmentName *string  `protobuf:"bytes,18,opt,name=department_name,json=departmentName,proto3,oneof" json:"department_name,omitempty"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	mi := &file_rpc_core_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{68}
}

func (x *UserInfo) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *UserInfo) GetCreatedAt() int64 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

func (x *UserInfo) GetUpdatedAt() int64 {
	if x != nil && x.UpdatedAt != nil {
		return *x.UpdatedAt
	}
	return 0
}

func (x *UserInfo) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *UserInfo) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *UserInfo) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *UserInfo) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *UserInfo) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UserInfo) GetHomePath() string {
	if x != nil && x.HomePath != nil {
		return *x.HomePath
	}
	return ""
}

func (x *UserInfo) GetRoleIds() []uint64 {
	if x != nil {
		return x.RoleIds
	}
	return nil
}

func (x *UserInfo) GetMobile() string {
	if x != nil && x.Mobile != nil {
		return *x.Mobile
	}
	return ""
}

func (x *UserInfo) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *UserInfo) GetAvatar() string {
	if x != nil && x.Avatar != nil {
		return *x.Avatar
	}
	return ""
}

func (x *UserInfo) GetDepartmentId() uint64 {
	if x != nil && x.DepartmentId != nil {
		return *x.DepartmentId
	}
	return 0
}

func (x *UserInfo) GetPositionIds() []uint64 {
	if x != nil {
		return x.PositionIds
	}
	return nil
}

func (x *UserInfo) GetRoleCodes() []string {
	if x != nil {
		return x.RoleCodes
	}
	return nil
}

func (x *UserInfo) GetRoleName() []string {
	if x != nil {
		return x.RoleName
	}
	return nil
}

func (x *UserInfo) GetDepartmentName() string {
	if x != nil && x.DepartmentName != nil {
		return *x.DepartmentName
	}
	return ""
}

type UserListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page         uint64   `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize     uint64   `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Username     *string  `protobuf:"bytes,3,opt,name=username,proto3,oneof" json:"username,omitempty"`
	Nickname     *string  `protobuf:"bytes,4,opt,name=nickname,proto3,oneof" json:"nickname,omitempty"`
	Email        *string  `protobuf:"bytes,5,opt,name=email,proto3,oneof" json:"email,omitempty"`
	Mobile       *string  `protobuf:"bytes,6,opt,name=mobile,proto3,oneof" json:"mobile,omitempty"`
	RoleIds      []uint64 `protobuf:"varint,7,rep,packed,name=role_ids,json=roleIds,proto3" json:"role_ids,omitempty"`
	DepartmentId *uint64  `protobuf:"varint,8,opt,name=department_id,json=departmentId,proto3,oneof" json:"department_id,omitempty"`
	PositionIds  []uint64 `protobuf:"varint,9,rep,packed,name=position_ids,json=positionIds,proto3" json:"position_ids,omitempty"`
}

func (x *UserListReq) Reset() {
	*x = UserListReq{}
	mi := &file_rpc_core_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserListReq) ProtoMessage() {}

func (x *UserListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserListReq.ProtoReflect.Descriptor instead.
func (*UserListReq) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{69}
}

func (x *UserListReq) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *UserListReq) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *UserListReq) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *UserListReq) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *UserListReq) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *UserListReq) GetMobile() string {
	if x != nil && x.Mobile != nil {
		return *x.Mobile
	}
	return ""
}

func (x *UserListReq) GetRoleIds() []uint64 {
	if x != nil {
		return x.RoleIds
	}
	return nil
}

func (x *UserListReq) GetDepartmentId() uint64 {
	if x != nil && x.DepartmentId != nil {
		return *x.DepartmentId
	}
	return 0
}

func (x *UserListReq) GetPositionIds() []uint64 {
	if x != nil {
		return x.PositionIds
	}
	return nil
}

type UserListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64      `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*UserInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UserListResp) Reset() {
	*x = UserListResp{}
	mi := &file_rpc_core_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserListResp) ProtoMessage() {}

func (x *UserListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserListResp.ProtoReflect.Descriptor instead.
func (*UserListResp) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{70}
}

func (x *UserListResp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UserListResp) GetData() []*UserInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type UsernameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *UsernameReq) Reset() {
	*x = UsernameReq{}
	mi := &file_rpc_core_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UsernameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsernameReq) ProtoMessage() {}

func (x *UsernameReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_core_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsernameReq.ProtoReflect.Descriptor instead.
func (*UsernameReq) Descriptor() ([]byte, []int) {
	return file_rpc_core_proto_rawDescGZIP(), []int{71}
}

func (x *UsernameReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

var File_rpc_core_proto protoreflect.FileDescriptor

var file_rpc_core_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x04, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xab, 0x03, 0x0a, 0x07, 0x41, 0x70, 0x69, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x02, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x61, 0x70, 0x69, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x08, 0x61, 0x70, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x06, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03,
	0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61,
	0x70, 0x69, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xda, 0x02, 0x0a, 0x0a, 0x41, 0x70, 0x69, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x61, 0x70, 0x69, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x61, 0x70, 0x69, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x70, 0x69,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x46, 0x0a, 0x0b, 0x41, 0x70, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x70, 0x69, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe6, 0x04, 0x0a, 0x0f, 0x41, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x0b, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x69, 0x64,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x06, 0x69,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x07, 0x52, 0x03, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10,
	0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x48, 0x08, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x73, 0x79, 0x6d, 0x70, 0x74, 0x6f, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09,
	0x52, 0x08, 0x73, 0x79, 0x6d, 0x70, 0x74, 0x6f, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x07, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x67,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x61, 0x67, 0x65, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x79, 0x6d, 0x70, 0x74, 0x6f, 0x6d, 0x73, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x22, 0xb3, 0x02, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0b, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x69, 0x64,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x69,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x56, 0x0a, 0x13, 0x41, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x2e, 0x0a, 0x0a, 0x42, 0x61, 0x73, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x22, 0x1b, 0x0a, 0x07, 0x42, 0x61, 0x73, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x1c, 0x0a,
	0x08, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x30, 0x0a, 0x0c, 0x42,
	0x61, 0x73, 0x65, 0x55, 0x55, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x37, 0x0a,
	0x0b, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x98, 0x03, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x73, 0x6f, 0x72, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6b, 0x65, 0x79, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x22, 0xdb, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x5a, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2b,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf9, 0x03, 0x0a, 0x0e,
	0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52,
	0x09, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52,
	0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0a, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x0b, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x17,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x54, 0x0a, 0x12, 0x44, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x87,
	0x03, 0x0a, 0x14, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x06, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x48, 0x07, 0x52, 0x0c, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x72, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x08, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x88, 0x01,
	0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x6b, 0x65, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x22, 0xa5, 0x01, 0x0a, 0x17, 0x44, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0c,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x15, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6b, 0x65, 0x79,
	0x22, 0x60, 0x0a, 0x18, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xa3, 0x02, 0x0a, 0x0e, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x02, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x06, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03,
	0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x22, 0x66, 0x0a, 0x11, 0x44, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x17,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x54, 0x0a, 0x12, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0xfc, 0x04, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x5a, 0x68, 0x88, 0x01, 0x01, 0x12,
	0x1c, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x06, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07,
	0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x6b, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x06,
	0x6e, 0x61, 0x6d, 0x65, 0x4b, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x7a, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5a, 0x68, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0a, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x6b, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x4b, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x08,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x73, 0x6f, 0x72, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x68,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x75, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x6b, 0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x7a, 0x68, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x65, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x75, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x6b,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0xbe,
	0x01, 0x0a, 0x0d, 0x45, 0x78, 0x70, 0x65, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1c, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x5a, 0x68, 0x88, 0x01, 0x01, 0x12,
	0x1c, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x75, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x68, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x65, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x75, 0x22,
	0x4c, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x17, 0x0a,
	0x05, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1a, 0x0a, 0x06, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x69,
	0x64, 0x73, 0x22, 0xa8, 0x0d, 0x0a, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52,
	0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x61, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x03, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x29, 0x0a, 0x0e, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0c, 0x69, 0x64, 0x43,
	0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x07, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x63, 0x68, 0x69, 0x65, 0x66, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52,
	0x0e, 0x63, 0x68, 0x69, 0x65, 0x66, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6c,
	0x6c, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0e, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x49, 0x6c, 0x6c, 0x6e, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0b, 0x70, 0x61, 0x73, 0x74, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x73, 0x6d, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x0b, 0x52, 0x0e, 0x73, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x64, 0x72, 0x69, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x0c, 0x52, 0x0f, 0x64, 0x72, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67,
	0x79, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x0d, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0e, 0x52, 0x09, 0x68, 0x65, 0x61, 0x72,
	0x74, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x6f,
	0x64, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0f, 0x52, 0x0d, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x6f, 0x78, 0x79, 0x67, 0x65, 0x6e, 0x5f, 0x73,
	0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x10, 0x52, 0x10, 0x6f, 0x78, 0x79, 0x67, 0x65, 0x6e, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x5f,
	0x67, 0x6c, 0x75, 0x63, 0x6f, 0x73, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x48, 0x11, 0x52,
	0x0c, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x47, 0x6c, 0x75, 0x63, 0x6f, 0x73, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x12, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a,
	0x13, 0x77, 0x61, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x6d, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x48, 0x13, 0x52, 0x12, 0x77, 0x61,
	0x69, 0x73, 0x74, 0x43, 0x69, 0x72, 0x63, 0x75, 0x6d, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x66, 0x61, 0x74, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x01, 0x48, 0x14, 0x52, 0x07, 0x62, 0x6f, 0x64, 0x79, 0x46, 0x61, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x09, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x69, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x69, 0x65, 0x74, 0x5f, 0x74,
	0x68, 0x65, 0x72, 0x61, 0x70, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x48, 0x16, 0x52, 0x0b,
	0x64, 0x69, 0x65, 0x74, 0x54, 0x68, 0x65, 0x72, 0x61, 0x70, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2e,
	0x0a, 0x10, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x5f, 0x74, 0x68, 0x65, 0x72, 0x61,
	0x70, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x48, 0x17, 0x52, 0x0f, 0x65, 0x78, 0x65, 0x72,
	0x63, 0x69, 0x73, 0x65, 0x54, 0x68, 0x65, 0x72, 0x61, 0x70, 0x79, 0x88, 0x01, 0x01, 0x12, 0x32,
	0x0a, 0x12, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x68, 0x65,
	0x72, 0x61, 0x70, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x48, 0x18, 0x52, 0x11, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x65, 0x72, 0x61, 0x70, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x0d, 0x74, 0x72,
	0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x1a, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52,
	0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x61,
	0x67, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x68, 0x69, 0x65, 0x66,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6c, 0x6c, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x70, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x73, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x64, 0x72, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x67, 0x79, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x6f, 0x78, 0x79, 0x67, 0x65, 0x6e, 0x5f, 0x73, 0x61, 0x74, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x67,
	0x6c, 0x75, 0x63, 0x6f, 0x73, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x77, 0x61, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x69, 0x72, 0x63,
	0x75, 0x6d, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x6f,
	0x64, 0x79, 0x5f, 0x66, 0x61, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x69, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x69, 0x65, 0x74, 0x5f, 0x74, 0x68,
	0x65, 0x72, 0x61, 0x70, 0x79, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69,
	0x73, 0x65, 0x5f, 0x74, 0x68, 0x65, 0x72, 0x61, 0x70, 0x79, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x72, 0x61, 0x70,
	0x79, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0xf7, 0x01,
	0x0a, 0x14, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0b, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x29, 0x0a, 0x0e, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x69, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x5a, 0x0a, 0x15, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xff, 0x05, 0x0a, 0x0c, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x02, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x7a, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65,
	0x5a, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x75, 0x88, 0x01,
	0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6b, 0x6b, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x08, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x4b, 0x6b, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x09, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x7a, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x68, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0c, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x75, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0d,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6b, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0e, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0f, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03,
	0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x7a,
	0x68, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x75, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x6b, 0x6b, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x7a, 0x68, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x6b, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x22, 0xc0, 0x01, 0x0a, 0x0f, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x07, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x7a, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x6e,
	0x61, 0x6d, 0x65, 0x5a, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x6e, 0x61, 0x6d,
	0x65, 0x45, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72,
	0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x52,
	0x75, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x68,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x75, 0x22, 0x50, 0x0a, 0x10, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9f, 0x05, 0x0a, 0x08, 0x4d,
	0x65, 0x6e, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x04, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x08, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x0a, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x23, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x0b, 0x52, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x6e,
	0x75, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d,
	0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x0a, 0x0c,
	0x4d, 0x65, 0x6e, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x50, 0x0a, 0x0c, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x6f,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x65, 0x6e, 0x75, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x10, 0x4d, 0x65, 0x6e, 0x75,
	0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x6f, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xfc, 0x04, 0x0a, 0x04, 0x4d,
	0x65, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x68, 0x69, 0x64, 0x65, 0x5f,
	0x6d, 0x65, 0x6e, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x08, 0x68, 0x69,
	0x64, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x68, 0x69, 0x64,
	0x65, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x64, 0x63, 0x72, 0x75, 0x6d, 0x62, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x03, 0x52, 0x0e, 0x68, 0x69, 0x64, 0x65, 0x42, 0x72, 0x65, 0x61, 0x64, 0x63,
	0x72, 0x75, 0x6d, 0x62, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x04, 0x52, 0x0f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4b, 0x65, 0x65, 0x70,
	0x41, 0x6c, 0x69, 0x76, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x68, 0x69, 0x64, 0x65,
	0x5f, 0x74, 0x61, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x07, 0x68, 0x69,
	0x64, 0x65, 0x54, 0x61, 0x62, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x5f, 0x73, 0x72, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x08, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x53, 0x72, 0x63, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x61,
	0x72, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x07, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x88, 0x01, 0x01,
	0x12, 0x36, 0x0a, 0x15, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x08, 0x52, 0x12, 0x68, 0x69, 0x64, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x49,
	0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x66, 0x66, 0x69,
	0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x09, 0x52, 0x05, 0x61, 0x66, 0x66, 0x69, 0x78,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0a, 0x52, 0x0c, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0b, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x63,
	0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x6d, 0x65, 0x6e, 0x75,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x64, 0x63,
	0x72, 0x75, 0x6d, 0x62, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f,
	0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x68,
	0x69, 0x64, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x5f, 0x73, 0x72, 0x63, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x79, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x78, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x72, 0x65, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x22, 0x86, 0x05, 0x0a, 0x08, 0x4e, 0x65,
	0x77, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04,
	0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x5f, 0x7a, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x07, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x5a, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x07, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x07, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x5f, 0x6b, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x07, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x4b, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x7a, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5a, 0x68, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0a, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x6b, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x4b, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x08,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x73, 0x6f, 0x72, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x7a,
	0x68, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x6b, 0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x7a, 0x68, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x75, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x6b, 0x6b, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x75,
	0x72, 0x6c, 0x22, 0xc5, 0x01, 0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x7a, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5a, 0x68,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x75,
	0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x7a, 0x68,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x22, 0x48, 0x0a, 0x0c, 0x4e, 0x65,
	0x77, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x41, 0x0a, 0x0d, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0xc1, 0x04, 0x0a, 0x11, 0x4f, 0x61, 0x75, 0x74,
	0x68, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0c,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x55, 0x72,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x48, 0x0a, 0x52, 0x09, 0x61, 0x75,
	0x74, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x07,
	0x69, 0x6e, 0x66, 0x6f, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69,
	0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x75, 0x72,
	0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0x69, 0x0a, 0x14, 0x4f,
	0x61, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5a, 0x0a, 0x15, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x61, 0x75, 0x74, 0x68,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x25, 0x0a, 0x11, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x3e, 0x0a, 0x0b, 0x50, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xc6, 0x02, 0x0a, 0x0c, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x04, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x07, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03,
	0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x22, 0xae, 0x01, 0x0a, 0x0f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x22, 0x50, 0x0a, 0x10, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x26, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x81, 0x03, 0x0a, 0x08, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x02, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x08, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x22, 0xc1, 0x01, 0x0a, 0x0b, 0x52, 0x6f,
	0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x22, 0x48, 0x0a,
	0x0c, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4a, 0x0a, 0x14, 0x52, 0x6f, 0x6c, 0x65, 0x4d,
	0x65, 0x6e, 0x75, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x65, 0x6e, 0x75,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x65, 0x6e, 0x75,
	0x49, 0x64, 0x73, 0x22, 0x32, 0x0a, 0x15, 0x52, 0x6f, 0x6c, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x19, 0x0a, 0x08,
	0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07,
	0x6d, 0x65, 0x6e, 0x75, 0x49, 0x64, 0x73, 0x22, 0xad, 0x05, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x04, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x7a, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x06, 0x6e,
	0x61, 0x6d, 0x65, 0x5a, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x06, 0x6e, 0x61, 0x6d,
	0x65, 0x45, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72,
	0x75, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x52,
	0x75, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6b, 0x6b, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x4b, 0x6b, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x7a, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0d, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x68, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x0e, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0b, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c,
	0x52, 0x0d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6b, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x72,
	0x6c, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x68, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72,
	0x75, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6b, 0x6b, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x68,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x65, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x6b, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0xbf, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x07, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06,
	0x6e, 0x61, 0x6d, 0x65, 0x5a, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x6e, 0x61,
	0x6d, 0x65, 0x45, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x72, 0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65,
	0x52, 0x75, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x7a,
	0x68, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x75, 0x22, 0x4e, 0x0a, 0x0f, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc5, 0x06, 0x0a, 0x0a, 0x53, 0x77,
	0x69, 0x70, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x04, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x5f, 0x7a, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52,
	0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5a, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52,
	0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52,
	0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x5f, 0x6b, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52,
	0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x4b, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x62,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x7a, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09,
	0x52, 0x08, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5a, 0x68, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0a, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0b, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x75, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6b, 0x6b, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4b, 0x6b,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x7a,
	0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5a, 0x68, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0f, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x6b, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4b, 0x6b,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x07, 0x6a, 0x75, 0x6d, 0x70, 0x55, 0x72, 0x6c,
	0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x7a, 0x68, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x5f, 0x72, 0x75, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x6b, 0x6b,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x7a, 0x68, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x62,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6b, 0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x7a, 0x68, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x75, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x6b, 0x6b, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x75, 0x72,
	0x6c, 0x22, 0xc7, 0x01, 0x0a, 0x0d, 0x53, 0x77, 0x69, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x7a, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5a,
	0x68, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x45,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x52,
	0x75, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x7a,
	0x68, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x22, 0x4c, 0x0a, 0x0e, 0x53,
	0x77, 0x69, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x77, 0x69, 0x70, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x85, 0x03, 0x0a, 0x09, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x48, 0x07, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0xe2, 0x01, 0x0a, 0x0c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x22, 0x4a, 0x0a, 0x0d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x23, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x19, 0x0a, 0x07, 0x55, 0x55, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1c, 0x0a,
	0x08, 0x55, 0x55, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x92, 0x06, 0x0a, 0x08,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x08, 0x52, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0b, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x04, 0x48, 0x0c, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0b,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x6f, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0d, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xe1, 0x02, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1f, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x72,
	0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x72,
	0x6f, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x48, 0x04, 0x52,
	0x0c, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x22, 0x48, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x29,
	0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x83, 0x2b, 0x0a, 0x04, 0x43, 0x6f,
	0x72, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x69, 0x12,
	0x0d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x70, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x10,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x2a, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x69, 0x12, 0x0d, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x70, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0e, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x0a,
	0x67, 0x65, 0x74, 0x41, 0x70, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x41, 0x70, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x41, 0x70, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x28, 0x0a, 0x0a, 0x67, 0x65, 0x74, 0x41, 0x70, 0x69, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x41, 0x70, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x09, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x70, 0x69, 0x12, 0x0c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x44,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x3e, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x1a, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x55, 0x55, 0x49, 0x44,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x1a, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x49, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x12, 0x67,
	0x65, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49,
	0x64, 0x12, 0x0d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x1a, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x10,
	0x67, 0x65, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x0b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x49, 0x0a, 0x1b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6e, 0x75,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2b, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x0b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x40, 0x0a, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x1a, 0x10, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x44,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x3e, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x4f, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x1a, 0x10, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x44,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0e,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x46,
	0x0a, 0x11, 0x67, 0x65, 0x74, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x44, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30,
	0x0a, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x0c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x3a, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x72, 0x79, 0x12, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x10, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x10,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79,
	0x12, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x46, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x44, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36,
	0x0a, 0x11, 0x67, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x42,
	0x79, 0x49, 0x64, 0x12, 0x0b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x1a, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x0c, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x46, 0x0a, 0x16, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x10,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x44, 0x0a, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x58, 0x0a, 0x17, 0x67, 0x65, 0x74, 0x44, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x1e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x42, 0x0a, 0x17, 0x67, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72,
	0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x16, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0c,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x54, 0x0a, 0x23,
	0x67, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x42, 0x79, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x0d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x4d,
	0x73, 0x67, 0x1a, 0x1e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x32, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x74, 0x12, 0x10, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x10, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x74, 0x12, 0x10, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x14,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x1a, 0x10, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x74, 0x12, 0x0c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x44, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x42, 0x0a, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x1a, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x55, 0x55,
	0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3e, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x17, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4f, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3e, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x49, 0x64, 0x12,
	0x0d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x17,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0e,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36,
	0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x12, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x10, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0e, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x40, 0x0a, 0x0f,
	0x67, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x32,
	0x0a, 0x0f, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x79, 0x49,
	0x64, 0x12, 0x0b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x12,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x12, 0x0c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x44, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6e, 0x75,
	0x12, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x6e, 0x66, 0x6f,
	0x1a, 0x10, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x44, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x2c, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6e, 0x75,
	0x12, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x6e, 0x66, 0x6f,
	0x1a, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x29, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x0b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x11, 0x67,
	0x65, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x52, 0x6f, 0x6c, 0x65,
	0x12, 0x0d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x4d, 0x73, 0x67, 0x1a,
	0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x11, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x6e,
	0x75, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x12, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x65, 0x77, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x10, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x12, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x65, 0x77, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x4e, 0x65,
	0x77, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x11, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x65,
	0x77, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4e, 0x65, 0x77, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2a, 0x0a,
	0x0b, 0x67, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4e, 0x65, 0x77, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x0a, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x12, 0x0c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x44, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x40, 0x0a, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x61, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x10, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3e, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x17,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4f, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x4f, 0x61,
	0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x4f,
	0x61, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64,
	0x12, 0x0b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4f, 0x61, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x0c, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x0a, 0x6f,
	0x61, 0x75, 0x74, 0x68, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x13, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x17,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x0d, 0x6f, 0x61, 0x75, 0x74, 0x68,
	0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x11, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x0e, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x1a, 0x10, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x44, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x40, 0x0a, 0x0f, 0x67, 0x65, 0x74,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x0f, 0x67,
	0x65, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x2e, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x2e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x10, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x2c, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a,
	0x0b, 0x67, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x11, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x2a, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x79,
	0x49, 0x64, 0x12, 0x0b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a,
	0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x2a, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0c, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x0d, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x11, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a,
	0x10, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x32, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x11, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3d, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x44, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x77, 0x69, 0x70, 0x65, 0x72, 0x12, 0x10, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x77, 0x69,
	0x70, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x10, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x0c, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x77, 0x69, 0x70, 0x65, 0x72, 0x12, 0x10, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x77, 0x69, 0x70, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0e, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x0d, 0x67,
	0x65, 0x74, 0x53, 0x77, 0x69, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x77, 0x69, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x77, 0x69, 0x70, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x53, 0x77,
	0x69, 0x70, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x77, 0x69,
	0x70, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x77, 0x69, 0x70, 0x65, 0x72, 0x12, 0x0c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x44, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x55, 0x55, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2d, 0x0a, 0x0b, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x55, 0x55, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x37, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x2e, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x79, 0x49,
	0x64, 0x12, 0x0d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x1a, 0x0f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x32, 0x0a, 0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6c,
	0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x55,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x1a, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x55,
	0x55, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x11, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x0b, 0x67,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0d, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x11, 0x67, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x11,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2c, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x42,
	0x08, 0x5a, 0x06, 0x2e, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_rpc_core_proto_rawDescOnce sync.Once
	file_rpc_core_proto_rawDescData = file_rpc_core_proto_rawDesc
)

func file_rpc_core_proto_rawDescGZIP() []byte {
	file_rpc_core_proto_rawDescOnce.Do(func() {
		file_rpc_core_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_core_proto_rawDescData)
	})
	return file_rpc_core_proto_rawDescData
}

var file_rpc_core_proto_msgTypes = make([]protoimpl.MessageInfo, 72)
var file_rpc_core_proto_goTypes = []any{
	(*ApiInfo)(nil),                  // 0: core.ApiInfo
	(*ApiListReq)(nil),               // 1: core.ApiListReq
	(*ApiListResp)(nil),              // 2: core.ApiListResp
	(*AppointmentInfo)(nil),          // 3: core.AppointmentInfo
	(*AppointmentListReq)(nil),       // 4: core.AppointmentListReq
	(*AppointmentListResp)(nil),      // 5: core.AppointmentListResp
	(*BaseIDResp)(nil),               // 6: core.BaseIDResp
	(*BaseMsg)(nil),                  // 7: core.BaseMsg
	(*BaseResp)(nil),                 // 8: core.BaseResp
	(*BaseUUIDResp)(nil),             // 9: core.BaseUUIDResp
	(*CallbackReq)(nil),              // 10: core.CallbackReq
	(*ConfigurationInfo)(nil),        // 11: core.ConfigurationInfo
	(*ConfigurationListReq)(nil),     // 12: core.ConfigurationListReq
	(*ConfigurationListResp)(nil),    // 13: core.ConfigurationListResp
	(*DepartmentInfo)(nil),           // 14: core.DepartmentInfo
	(*DepartmentListReq)(nil),        // 15: core.DepartmentListReq
	(*DepartmentListResp)(nil),       // 16: core.DepartmentListResp
	(*DictionaryDetailInfo)(nil),     // 17: core.DictionaryDetailInfo
	(*DictionaryDetailListReq)(nil),  // 18: core.DictionaryDetailListReq
	(*DictionaryDetailListResp)(nil), // 19: core.DictionaryDetailListResp
	(*DictionaryInfo)(nil),           // 20: core.DictionaryInfo
	(*DictionaryListReq)(nil),        // 21: core.DictionaryListReq
	(*DictionaryListResp)(nil),       // 22: core.DictionaryListResp
	(*Empty)(nil),                    // 23: core.Empty
	(*ExpertInfo)(nil),               // 24: core.ExpertInfo
	(*ExpertListReq)(nil),            // 25: core.ExpertListReq
	(*ExpertListResp)(nil),           // 26: core.ExpertListResp
	(*IDReq)(nil),                    // 27: core.IDReq
	(*IDsReq)(nil),                   // 28: core.IDsReq
	(*MedicalRecordInfo)(nil),        // 29: core.MedicalRecordInfo
	(*MedicalRecordListReq)(nil),     // 30: core.MedicalRecordListReq
	(*MedicalRecordListResp)(nil),    // 31: core.MedicalRecordListResp
	(*MedicineInfo)(nil),             // 32: core.MedicineInfo
	(*MedicineListReq)(nil),          // 33: core.MedicineListReq
	(*MedicineListResp)(nil),         // 34: core.MedicineListResp
	(*MenuInfo)(nil),                 // 35: core.MenuInfo
	(*MenuInfoList)(nil),             // 36: core.MenuInfoList
	(*MenuRoleInfo)(nil),             // 37: core.MenuRoleInfo
	(*MenuRoleListResp)(nil),         // 38: core.MenuRoleListResp
	(*Meta)(nil),                     // 39: core.Meta
	(*NewsInfo)(nil),                 // 40: core.NewsInfo
	(*NewsListReq)(nil),              // 41: core.NewsListReq
	(*NewsListResp)(nil),             // 42: core.NewsListResp
	(*OauthLoginReq)(nil),            // 43: core.OauthLoginReq
	(*OauthProviderInfo)(nil),        // 44: core.OauthProviderInfo
	(*OauthProviderListReq)(nil),     // 45: core.OauthProviderListReq
	(*OauthProviderListResp)(nil),    // 46: core.OauthProviderListResp
	(*OauthRedirectResp)(nil),        // 47: core.OauthRedirectResp
	(*PageInfoReq)(nil),              // 48: core.PageInfoReq
	(*PositionInfo)(nil),             // 49: core.PositionInfo
	(*PositionListReq)(nil),          // 50: core.PositionListReq
	(*PositionListResp)(nil),         // 51: core.PositionListResp
	(*RoleInfo)(nil),                 // 52: core.RoleInfo
	(*RoleListReq)(nil),              // 53: core.RoleListReq
	(*RoleListResp)(nil),             // 54: core.RoleListResp
	(*RoleMenuAuthorityReq)(nil),     // 55: core.RoleMenuAuthorityReq
	(*RoleMenuAuthorityResp)(nil),    // 56: core.RoleMenuAuthorityResp
	(*ServiceInfo)(nil),              // 57: core.ServiceInfo
	(*ServiceListReq)(nil),           // 58: core.ServiceListReq
	(*ServiceListResp)(nil),          // 59: core.ServiceListResp
	(*SwiperInfo)(nil),               // 60: core.SwiperInfo
	(*SwiperListReq)(nil),            // 61: core.SwiperListReq
	(*SwiperListResp)(nil),           // 62: core.SwiperListResp
	(*TokenInfo)(nil),                // 63: core.TokenInfo
	(*TokenListReq)(nil),             // 64: core.TokenListReq
	(*TokenListResp)(nil),            // 65: core.TokenListResp
	(*UUIDReq)(nil),                  // 66: core.UUIDReq
	(*UUIDsReq)(nil),                 // 67: core.UUIDsReq
	(*UserInfo)(nil),                 // 68: core.UserInfo
	(*UserListReq)(nil),              // 69: core.UserListReq
	(*UserListResp)(nil),             // 70: core.UserListResp
	(*UsernameReq)(nil),              // 71: core.UsernameReq
}
var file_rpc_core_proto_depIdxs = []int32{
	0,   // 0: core.ApiListResp.data:type_name -> core.ApiInfo
	3,   // 1: core.AppointmentListResp.data:type_name -> core.AppointmentInfo
	11,  // 2: core.ConfigurationListResp.data:type_name -> core.ConfigurationInfo
	14,  // 3: core.DepartmentListResp.data:type_name -> core.DepartmentInfo
	17,  // 4: core.DictionaryDetailListResp.data:type_name -> core.DictionaryDetailInfo
	20,  // 5: core.DictionaryListResp.data:type_name -> core.DictionaryInfo
	24,  // 6: core.ExpertListResp.data:type_name -> core.ExpertInfo
	29,  // 7: core.MedicalRecordListResp.data:type_name -> core.MedicalRecordInfo
	32,  // 8: core.MedicineListResp.data:type_name -> core.MedicineInfo
	39,  // 9: core.MenuInfo.meta:type_name -> core.Meta
	35,  // 10: core.MenuInfoList.data:type_name -> core.MenuInfo
	37,  // 11: core.MenuRoleListResp.data:type_name -> core.MenuRoleInfo
	40,  // 12: core.NewsListResp.data:type_name -> core.NewsInfo
	44,  // 13: core.OauthProviderListResp.data:type_name -> core.OauthProviderInfo
	49,  // 14: core.PositionListResp.data:type_name -> core.PositionInfo
	52,  // 15: core.RoleListResp.data:type_name -> core.RoleInfo
	57,  // 16: core.ServiceListResp.data:type_name -> core.ServiceInfo
	60,  // 17: core.SwiperListResp.data:type_name -> core.SwiperInfo
	63,  // 18: core.TokenListResp.data:type_name -> core.TokenInfo
	68,  // 19: core.UserListResp.data:type_name -> core.UserInfo
	0,   // 20: core.Core.createApi:input_type -> core.ApiInfo
	0,   // 21: core.Core.updateApi:input_type -> core.ApiInfo
	1,   // 22: core.Core.getApiList:input_type -> core.ApiListReq
	27,  // 23: core.Core.getApiById:input_type -> core.IDReq
	28,  // 24: core.Core.deleteApi:input_type -> core.IDsReq
	3,   // 25: core.Core.createAppointment:input_type -> core.AppointmentInfo
	3,   // 26: core.Core.updateAppointment:input_type -> core.AppointmentInfo
	4,   // 27: core.Core.getAppointmentList:input_type -> core.AppointmentListReq
	66,  // 28: core.Core.getAppointmentById:input_type -> core.UUIDReq
	67,  // 29: core.Core.deleteAppointment:input_type -> core.UUIDsReq
	27,  // 30: core.Core.getMenuAuthority:input_type -> core.IDReq
	55,  // 31: core.Core.createOrUpdateMenuAuthority:input_type -> core.RoleMenuAuthorityReq
	23,  // 32: core.Core.initDatabase:input_type -> core.Empty
	11,  // 33: core.Core.createConfiguration:input_type -> core.ConfigurationInfo
	11,  // 34: core.Core.updateConfiguration:input_type -> core.ConfigurationInfo
	12,  // 35: core.Core.getConfigurationList:input_type -> core.ConfigurationListReq
	27,  // 36: core.Core.getConfigurationById:input_type -> core.IDReq
	28,  // 37: core.Core.deleteConfiguration:input_type -> core.IDsReq
	14,  // 38: core.Core.createDepartment:input_type -> core.DepartmentInfo
	14,  // 39: core.Core.updateDepartment:input_type -> core.DepartmentInfo
	15,  // 40: core.Core.getDepartmentList:input_type -> core.DepartmentListReq
	27,  // 41: core.Core.getDepartmentById:input_type -> core.IDReq
	28,  // 42: core.Core.deleteDepartment:input_type -> core.IDsReq
	20,  // 43: core.Core.createDictionary:input_type -> core.DictionaryInfo
	20,  // 44: core.Core.updateDictionary:input_type -> core.DictionaryInfo
	21,  // 45: core.Core.getDictionaryList:input_type -> core.DictionaryListReq
	27,  // 46: core.Core.getDictionaryById:input_type -> core.IDReq
	28,  // 47: core.Core.deleteDictionary:input_type -> core.IDsReq
	17,  // 48: core.Core.createDictionaryDetail:input_type -> core.DictionaryDetailInfo
	17,  // 49: core.Core.updateDictionaryDetail:input_type -> core.DictionaryDetailInfo
	18,  // 50: core.Core.getDictionaryDetailList:input_type -> core.DictionaryDetailListReq
	27,  // 51: core.Core.getDictionaryDetailById:input_type -> core.IDReq
	28,  // 52: core.Core.deleteDictionaryDetail:input_type -> core.IDsReq
	7,   // 53: core.Core.getDictionaryDetailByDictionaryName:input_type -> core.BaseMsg
	24,  // 54: core.Core.createExpert:input_type -> core.ExpertInfo
	24,  // 55: core.Core.updateExpert:input_type -> core.ExpertInfo
	25,  // 56: core.Core.getExpertList:input_type -> core.ExpertListReq
	27,  // 57: core.Core.getExpertById:input_type -> core.IDReq
	28,  // 58: core.Core.deleteExpert:input_type -> core.IDsReq
	29,  // 59: core.Core.createMedicalRecord:input_type -> core.MedicalRecordInfo
	29,  // 60: core.Core.updateMedicalRecord:input_type -> core.MedicalRecordInfo
	30,  // 61: core.Core.getMedicalRecordList:input_type -> core.MedicalRecordListReq
	66,  // 62: core.Core.getMedicalRecordById:input_type -> core.UUIDReq
	67,  // 63: core.Core.deleteMedicalRecord:input_type -> core.UUIDsReq
	32,  // 64: core.Core.createMedicine:input_type -> core.MedicineInfo
	32,  // 65: core.Core.updateMedicine:input_type -> core.MedicineInfo
	33,  // 66: core.Core.getMedicineList:input_type -> core.MedicineListReq
	27,  // 67: core.Core.getMedicineById:input_type -> core.IDReq
	28,  // 68: core.Core.deleteMedicine:input_type -> core.IDsReq
	35,  // 69: core.Core.createMenu:input_type -> core.MenuInfo
	35,  // 70: core.Core.updateMenu:input_type -> core.MenuInfo
	27,  // 71: core.Core.deleteMenu:input_type -> core.IDReq
	7,   // 72: core.Core.getMenuListByRole:input_type -> core.BaseMsg
	48,  // 73: core.Core.getMenuList:input_type -> core.PageInfoReq
	40,  // 74: core.Core.createNews:input_type -> core.NewsInfo
	40,  // 75: core.Core.updateNews:input_type -> core.NewsInfo
	41,  // 76: core.Core.getNewsList:input_type -> core.NewsListReq
	27,  // 77: core.Core.getNewsById:input_type -> core.IDReq
	28,  // 78: core.Core.deleteNews:input_type -> core.IDsReq
	44,  // 79: core.Core.createOauthProvider:input_type -> core.OauthProviderInfo
	44,  // 80: core.Core.updateOauthProvider:input_type -> core.OauthProviderInfo
	45,  // 81: core.Core.getOauthProviderList:input_type -> core.OauthProviderListReq
	27,  // 82: core.Core.getOauthProviderById:input_type -> core.IDReq
	28,  // 83: core.Core.deleteOauthProvider:input_type -> core.IDsReq
	43,  // 84: core.Core.oauthLogin:input_type -> core.OauthLoginReq
	10,  // 85: core.Core.oauthCallback:input_type -> core.CallbackReq
	49,  // 86: core.Core.createPosition:input_type -> core.PositionInfo
	49,  // 87: core.Core.updatePosition:input_type -> core.PositionInfo
	50,  // 88: core.Core.getPositionList:input_type -> core.PositionListReq
	27,  // 89: core.Core.getPositionById:input_type -> core.IDReq
	28,  // 90: core.Core.deletePosition:input_type -> core.IDsReq
	52,  // 91: core.Core.createRole:input_type -> core.RoleInfo
	52,  // 92: core.Core.updateRole:input_type -> core.RoleInfo
	53,  // 93: core.Core.getRoleList:input_type -> core.RoleListReq
	27,  // 94: core.Core.getRoleById:input_type -> core.IDReq
	28,  // 95: core.Core.deleteRole:input_type -> core.IDsReq
	57,  // 96: core.Core.createService:input_type -> core.ServiceInfo
	57,  // 97: core.Core.updateService:input_type -> core.ServiceInfo
	58,  // 98: core.Core.getServiceList:input_type -> core.ServiceListReq
	27,  // 99: core.Core.getServiceById:input_type -> core.IDReq
	28,  // 100: core.Core.deleteService:input_type -> core.IDsReq
	60,  // 101: core.Core.createSwiper:input_type -> core.SwiperInfo
	60,  // 102: core.Core.updateSwiper:input_type -> core.SwiperInfo
	61,  // 103: core.Core.getSwiperList:input_type -> core.SwiperListReq
	27,  // 104: core.Core.getSwiperById:input_type -> core.IDReq
	28,  // 105: core.Core.deleteSwiper:input_type -> core.IDsReq
	63,  // 106: core.Core.createToken:input_type -> core.TokenInfo
	67,  // 107: core.Core.deleteToken:input_type -> core.UUIDsReq
	64,  // 108: core.Core.getTokenList:input_type -> core.TokenListReq
	66,  // 109: core.Core.getTokenById:input_type -> core.UUIDReq
	66,  // 110: core.Core.blockUserAllToken:input_type -> core.UUIDReq
	63,  // 111: core.Core.updateToken:input_type -> core.TokenInfo
	68,  // 112: core.Core.createUser:input_type -> core.UserInfo
	68,  // 113: core.Core.updateUser:input_type -> core.UserInfo
	69,  // 114: core.Core.getUserList:input_type -> core.UserListReq
	66,  // 115: core.Core.getUserById:input_type -> core.UUIDReq
	71,  // 116: core.Core.getUserByUsername:input_type -> core.UsernameReq
	67,  // 117: core.Core.deleteUser:input_type -> core.UUIDsReq
	6,   // 118: core.Core.createApi:output_type -> core.BaseIDResp
	8,   // 119: core.Core.updateApi:output_type -> core.BaseResp
	2,   // 120: core.Core.getApiList:output_type -> core.ApiListResp
	0,   // 121: core.Core.getApiById:output_type -> core.ApiInfo
	8,   // 122: core.Core.deleteApi:output_type -> core.BaseResp
	9,   // 123: core.Core.createAppointment:output_type -> core.BaseUUIDResp
	8,   // 124: core.Core.updateAppointment:output_type -> core.BaseResp
	5,   // 125: core.Core.getAppointmentList:output_type -> core.AppointmentListResp
	3,   // 126: core.Core.getAppointmentById:output_type -> core.AppointmentInfo
	8,   // 127: core.Core.deleteAppointment:output_type -> core.BaseResp
	56,  // 128: core.Core.getMenuAuthority:output_type -> core.RoleMenuAuthorityResp
	8,   // 129: core.Core.createOrUpdateMenuAuthority:output_type -> core.BaseResp
	8,   // 130: core.Core.initDatabase:output_type -> core.BaseResp
	6,   // 131: core.Core.createConfiguration:output_type -> core.BaseIDResp
	8,   // 132: core.Core.updateConfiguration:output_type -> core.BaseResp
	13,  // 133: core.Core.getConfigurationList:output_type -> core.ConfigurationListResp
	11,  // 134: core.Core.getConfigurationById:output_type -> core.ConfigurationInfo
	8,   // 135: core.Core.deleteConfiguration:output_type -> core.BaseResp
	6,   // 136: core.Core.createDepartment:output_type -> core.BaseIDResp
	8,   // 137: core.Core.updateDepartment:output_type -> core.BaseResp
	16,  // 138: core.Core.getDepartmentList:output_type -> core.DepartmentListResp
	14,  // 139: core.Core.getDepartmentById:output_type -> core.DepartmentInfo
	8,   // 140: core.Core.deleteDepartment:output_type -> core.BaseResp
	6,   // 141: core.Core.createDictionary:output_type -> core.BaseIDResp
	8,   // 142: core.Core.updateDictionary:output_type -> core.BaseResp
	22,  // 143: core.Core.getDictionaryList:output_type -> core.DictionaryListResp
	20,  // 144: core.Core.getDictionaryById:output_type -> core.DictionaryInfo
	8,   // 145: core.Core.deleteDictionary:output_type -> core.BaseResp
	6,   // 146: core.Core.createDictionaryDetail:output_type -> core.BaseIDResp
	8,   // 147: core.Core.updateDictionaryDetail:output_type -> core.BaseResp
	19,  // 148: core.Core.getDictionaryDetailList:output_type -> core.DictionaryDetailListResp
	17,  // 149: core.Core.getDictionaryDetailById:output_type -> core.DictionaryDetailInfo
	8,   // 150: core.Core.deleteDictionaryDetail:output_type -> core.BaseResp
	19,  // 151: core.Core.getDictionaryDetailByDictionaryName:output_type -> core.DictionaryDetailListResp
	6,   // 152: core.Core.createExpert:output_type -> core.BaseIDResp
	8,   // 153: core.Core.updateExpert:output_type -> core.BaseResp
	26,  // 154: core.Core.getExpertList:output_type -> core.ExpertListResp
	24,  // 155: core.Core.getExpertById:output_type -> core.ExpertInfo
	8,   // 156: core.Core.deleteExpert:output_type -> core.BaseResp
	9,   // 157: core.Core.createMedicalRecord:output_type -> core.BaseUUIDResp
	8,   // 158: core.Core.updateMedicalRecord:output_type -> core.BaseResp
	31,  // 159: core.Core.getMedicalRecordList:output_type -> core.MedicalRecordListResp
	29,  // 160: core.Core.getMedicalRecordById:output_type -> core.MedicalRecordInfo
	8,   // 161: core.Core.deleteMedicalRecord:output_type -> core.BaseResp
	6,   // 162: core.Core.createMedicine:output_type -> core.BaseIDResp
	8,   // 163: core.Core.updateMedicine:output_type -> core.BaseResp
	34,  // 164: core.Core.getMedicineList:output_type -> core.MedicineListResp
	32,  // 165: core.Core.getMedicineById:output_type -> core.MedicineInfo
	8,   // 166: core.Core.deleteMedicine:output_type -> core.BaseResp
	6,   // 167: core.Core.createMenu:output_type -> core.BaseIDResp
	8,   // 168: core.Core.updateMenu:output_type -> core.BaseResp
	8,   // 169: core.Core.deleteMenu:output_type -> core.BaseResp
	36,  // 170: core.Core.getMenuListByRole:output_type -> core.MenuInfoList
	36,  // 171: core.Core.getMenuList:output_type -> core.MenuInfoList
	6,   // 172: core.Core.createNews:output_type -> core.BaseIDResp
	8,   // 173: core.Core.updateNews:output_type -> core.BaseResp
	42,  // 174: core.Core.getNewsList:output_type -> core.NewsListResp
	40,  // 175: core.Core.getNewsById:output_type -> core.NewsInfo
	8,   // 176: core.Core.deleteNews:output_type -> core.BaseResp
	6,   // 177: core.Core.createOauthProvider:output_type -> core.BaseIDResp
	8,   // 178: core.Core.updateOauthProvider:output_type -> core.BaseResp
	46,  // 179: core.Core.getOauthProviderList:output_type -> core.OauthProviderListResp
	44,  // 180: core.Core.getOauthProviderById:output_type -> core.OauthProviderInfo
	8,   // 181: core.Core.deleteOauthProvider:output_type -> core.BaseResp
	47,  // 182: core.Core.oauthLogin:output_type -> core.OauthRedirectResp
	68,  // 183: core.Core.oauthCallback:output_type -> core.UserInfo
	6,   // 184: core.Core.createPosition:output_type -> core.BaseIDResp
	8,   // 185: core.Core.updatePosition:output_type -> core.BaseResp
	51,  // 186: core.Core.getPositionList:output_type -> core.PositionListResp
	49,  // 187: core.Core.getPositionById:output_type -> core.PositionInfo
	8,   // 188: core.Core.deletePosition:output_type -> core.BaseResp
	6,   // 189: core.Core.createRole:output_type -> core.BaseIDResp
	8,   // 190: core.Core.updateRole:output_type -> core.BaseResp
	54,  // 191: core.Core.getRoleList:output_type -> core.RoleListResp
	52,  // 192: core.Core.getRoleById:output_type -> core.RoleInfo
	8,   // 193: core.Core.deleteRole:output_type -> core.BaseResp
	6,   // 194: core.Core.createService:output_type -> core.BaseIDResp
	8,   // 195: core.Core.updateService:output_type -> core.BaseResp
	59,  // 196: core.Core.getServiceList:output_type -> core.ServiceListResp
	57,  // 197: core.Core.getServiceById:output_type -> core.ServiceInfo
	8,   // 198: core.Core.deleteService:output_type -> core.BaseResp
	6,   // 199: core.Core.createSwiper:output_type -> core.BaseIDResp
	8,   // 200: core.Core.updateSwiper:output_type -> core.BaseResp
	62,  // 201: core.Core.getSwiperList:output_type -> core.SwiperListResp
	60,  // 202: core.Core.getSwiperById:output_type -> core.SwiperInfo
	8,   // 203: core.Core.deleteSwiper:output_type -> core.BaseResp
	9,   // 204: core.Core.createToken:output_type -> core.BaseUUIDResp
	8,   // 205: core.Core.deleteToken:output_type -> core.BaseResp
	65,  // 206: core.Core.getTokenList:output_type -> core.TokenListResp
	63,  // 207: core.Core.getTokenById:output_type -> core.TokenInfo
	8,   // 208: core.Core.blockUserAllToken:output_type -> core.BaseResp
	8,   // 209: core.Core.updateToken:output_type -> core.BaseResp
	9,   // 210: core.Core.createUser:output_type -> core.BaseUUIDResp
	8,   // 211: core.Core.updateUser:output_type -> core.BaseResp
	70,  // 212: core.Core.getUserList:output_type -> core.UserListResp
	68,  // 213: core.Core.getUserById:output_type -> core.UserInfo
	68,  // 214: core.Core.getUserByUsername:output_type -> core.UserInfo
	8,   // 215: core.Core.deleteUser:output_type -> core.BaseResp
	118, // [118:216] is the sub-list for method output_type
	20,  // [20:118] is the sub-list for method input_type
	20,  // [20:20] is the sub-list for extension type_name
	20,  // [20:20] is the sub-list for extension extendee
	0,   // [0:20] is the sub-list for field type_name
}

func init() { file_rpc_core_proto_init() }
func file_rpc_core_proto_init() {
	if File_rpc_core_proto != nil {
		return
	}
	file_rpc_core_proto_msgTypes[0].OneofWrappers = []any{}
	file_rpc_core_proto_msgTypes[1].OneofWrappers = []any{}
	file_rpc_core_proto_msgTypes[3].OneofWrappers = []any{}
	file_rpc_core_proto_msgTypes[4].OneofWrappers = []any{}
	file_rpc_core_proto_msgTypes[11].OneofWrappers = []any{}
	file_rpc_core_proto_msgTypes[12].OneofWrappers = []any{}
	file_rpc_core_proto_msgTypes[14].OneofWrappers = []any{}
	file_rpc_core_proto_msgTypes[15].OneofWrappers = []any{}
	file_rpc_core_proto_msgTypes[17].OneofWrappers = []any{}
	file_rpc_core_proto_msgTypes[18].OneofWrappers = []any{}
	file_rpc_core_proto_msgTypes[20].OneofWrappers = []any{}
	file_rpc_core_proto_msgTypes[21].OneofWrappers = []any{}
	file_rpc_core_proto_msgTypes[24].OneofWrappers = []any{}
	file_rpc_core_proto_msgTypes[25].OneofWrappers = []any{}
	file_rpc_core_proto_msgTypes[29].OneofWrappers = []any{}
	file_rpc_core_proto_msgTypes[30].OneofWrappers = []any{}
	file_rpc_core_proto_msgTypes[32].OneofWrappers = []any{}
	file_rpc_core_proto_msgTypes[33].OneofWrappers = []any{}
	file_rpc_core_proto_msgTypes[35].OneofWrappers = []any{}
	file_rpc_core_proto_msgTypes[39].OneofWrappers = []any{}
	file_rpc_core_proto_msgTypes[40].OneofWrappers = []any{}
	file_rpc_core_proto_msgTypes[41].OneofWrappers = []any{}
	file_rpc_core_proto_msgTypes[44].OneofWrappers = []any{}
	file_rpc_core_proto_msgTypes[45].OneofWrappers = []any{}
	file_rpc_core_proto_msgTypes[49].OneofWrappers = []any{}
	file_rpc_core_proto_msgTypes[50].OneofWrappers = []any{}
	file_rpc_core_proto_msgTypes[52].OneofWrappers = []any{}
	file_rpc_core_proto_msgTypes[53].OneofWrappers = []any{}
	file_rpc_core_proto_msgTypes[57].OneofWrappers = []any{}
	file_rpc_core_proto_msgTypes[58].OneofWrappers = []any{}
	file_rpc_core_proto_msgTypes[60].OneofWrappers = []any{}
	file_rpc_core_proto_msgTypes[61].OneofWrappers = []any{}
	file_rpc_core_proto_msgTypes[63].OneofWrappers = []any{}
	file_rpc_core_proto_msgTypes[64].OneofWrappers = []any{}
	file_rpc_core_proto_msgTypes[68].OneofWrappers = []any{}
	file_rpc_core_proto_msgTypes[69].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_core_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   72,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rpc_core_proto_goTypes,
		DependencyIndexes: file_rpc_core_proto_depIdxs,
		MessageInfos:      file_rpc_core_proto_msgTypes,
	}.Build()
	File_rpc_core_proto = out.File
	file_rpc_core_proto_rawDesc = nil
	file_rpc_core_proto_goTypes = nil
	file_rpc_core_proto_depIdxs = nil
}
